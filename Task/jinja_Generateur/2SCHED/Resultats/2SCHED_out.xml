<?xml version="1.0" encoding="UTF-8" ?>
<romeo version="Romeo v3.10.2">
<TPN name="/media/khalil-hamdoune/Khalil/Application/romeo-3.10.2/Test Jinja/Done_Test/Before/2SCHED/Resultats/2SCHED_out.xml">
  <place id="1" identifier="CPU" label="" initialMarking="2" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="301" y="61"/> 
         <deltaLabel deltax="-2.0" deltay="-26.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="2" identifier="Exec_CPU" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="301" y="151"/> 
         <deltaLabel deltax="-1.0" deltay="-25.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="5" identifier="GPU" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="971" y="61"/> 
         <deltaLabel deltax="-2.0" deltay="-26.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="6" identifier="Exec_GPU" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="971" y="151"/> 
         <deltaLabel deltax="-1.0" deltay="-25.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="11" identifier="ReadyTsub22" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="91" y="391.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="17" identifier="Alternatif" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="1"> 
         <position x="91" y="661.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="19" identifier="TragetTsub25" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="151" y="751.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="20" identifier="ReadyTsub25" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="91" y="841.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="21" identifier="ReadyTsub27" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="91" y="1111.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="23" identifier="ReadyTsub28" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="91" y="1381.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="29" identifier="EndAlt" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="5"> 
         <position x="91" y="1591.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="31" identifier="ReadyTsub33" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="91" y="1771.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="33" identifier="Susp33" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="91" y="1951.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="35" identifier="TragetTsub26" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="331" y="751.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="40" identifier="Condition" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="3"> 
         <position x="541" y="691.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="42" identifier="ReadyTsub29" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="541" y="871.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="48" identifier="EndCond" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="5"> 
         <position x="631" y="1111.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="51" identifier="ReadyTsub30" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="781" y="871.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="53" identifier="ReadyTsub23" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1291" y="391.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="54" identifier="TASK0" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="91" y="2041.0"/> 
         <deltaLabel deltax="6.0" deltay="-23.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="57" identifier="TASK0_is_exec" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="271" y="2041.0"/> 
         <deltaLabel deltax="6.0" deltay="-23.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="59" identifier="TASK0_deadline_misses" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="451" y="2041.0"/> 
         <deltaLabel deltax="81.0" deltay="-5.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <transition id="3" identifier="SCHED_FP" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="1" obs="1"  guard="need_sched[FP] #greater 0"> 
     <graphics color="0"> 
        <position x="91" y="151"/> 
        <deltaLabel deltax="-18.0" deltay="-22.0"/> 
        <deltaGuard deltax="13.0" deltay="10.0"/> 
        <deltaUpdate deltax="75.0" deltay="23.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched[FP]--;
scheduler_fp(Ready_Task_CPU, List_CPU);
]]></update> 
  </transition> 

  <transition id="4" identifier="Free_CPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="1" obs="1"  guard="no_need_sched[FP] #greater 0"> 
     <graphics color="0"> 
        <position x="511" y="151"/> 
        <deltaLabel deltax="-21.0" deltay="-28.0"/> 
        <deltaGuard deltax="21.0" deltay="11.0"/> 
        <deltaUpdate deltax="20.0" deltay="32.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FP]--;]]></update> 
  </transition> 

  <transition id="7" identifier="SCHED_FIFO" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="1" obs="1"  guard="need_sched[FIFO] #greater 0"> 
     <graphics color="0"> 
        <position x="761" y="151"/> 
        <deltaLabel deltax="-18.0" deltay="-22.0"/> 
        <deltaGuard deltax="13.0" deltay="10.0"/> 
        <deltaUpdate deltax="75.0" deltay="23.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched[FIFO]--;
scheduler_fifo(Ready_Task_GPU, List_GPU);
]]></update> 
  </transition> 

  <transition id="8" identifier="Free_GPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="1" obs="1"  guard="no_need_sched[FIFO] #greater 0"> 
     <graphics color="0"> 
        <position x="1181" y="151"/> 
        <deltaLabel deltax="-21.0" deltay="-28.0"/> 
        <deltaGuard deltax="21.0" deltay="11.0"/> 
        <deltaUpdate deltax="20.0" deltay="32.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FIFO]--;]]></update> 
  </transition> 

  <transition id="11" identifier="StartTDAG0" label=""  eft="250" lft="250" eft_param="250" lft_param="250" speed="1" priority="0" cost="0" unctrl="1" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="91" y="301.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched[FP]++;
insert_CPU_task(List_Task, Ready_Task_CPU, 22);
need_sched[FP]++;
insert_CPU_task(List_Task, Ready_Task_CPU, 23);
]]></update> 
  </transition> 

  <transition id="12" identifier="ExecTsub22" label=""  eft="10" lft="15" eft_param="10" lft_param="15" speed="1" priority="0" cost="0" unctrl="1" obs="1"  guard="is_selected_task_CPU(List_CPU, 22)"> 
     <graphics color="0"> 
        <position x="91" y="481.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FP]++;
no_need_scheduler_fp(Ready_Task_CPU,
List_CPU, 22);
]]></update> 
  </transition> 

  <transition id="18" identifier="StartTsub25" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="70" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="91" y="751.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched[FP]++;
insert_CPU_task(List_Task,
Ready_Task_CPU, 25);
TragetTsub26 = 0;
]]></update> 
  </transition> 

  <transition id="20" identifier="ExecTsub25" label=""  eft="20" lft="25" eft_param="20" lft_param="25" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task_CPU(List_CPU, 25)"> 
     <graphics color="0"> 
        <position x="91" y="931.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FP]++;
no_need_scheduler_fp(Ready_Task_CPU,
List_CPU, 25);
need_sched[FIFO]++;
insert_GPU_task(List_Task,
Ready_Task_GPU, 27);
]]></update> 
  </transition> 

  <transition id="22" identifier="ExecTsub27" label=""  eft="30" lft="35" eft_param="30" lft_param="35" speed="1" priority="0" cost="0" unctrl="1" obs="1"  guard="is_selected_task_GPU(List_GPU, 27)"> 
     <graphics color="0"> 
        <position x="91" y="1201.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FIFO]++;
no_need_scheduler_fifo(Ready_Task_GPU,
List_GPU, 27);
need_sched[FP]++;
insert_CPU_task(List_Task,
Ready_Task_CPU, 28);
]]></update> 
  </transition> 

  <transition id="24" identifier="ExecTsub28" label=""  eft="30" lft="35" eft_param="30" lft_param="35" speed="1" priority="0" cost="0" unctrl="1" obs="1"  guard="is_selected_task_CPU(List_CPU, 28)"> 
     <graphics color="0"> 
        <position x="91" y="1471.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FP]++;
no_need_scheduler_fp(Ready_Task_CPU,
List_CPU, 28);
]]></update> 
  </transition> 

  <transition id="30" identifier="StartTsub33" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="70" cost="0" unctrl="1" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="91" y="1681.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched[FP]++;
insert_GPU_task(List_Task, Ready_Task_GPU, 33);]]></update> 
  </transition> 

  <transition id="32" identifier="ExecTsub33" label=""  eft="30" lft="35" eft_param="30" lft_param="35" speed="1" priority="0" cost="0" unctrl="1" obs="1"  guard="is_selected_task_GPU(List_GPU, 33)"> 
     <graphics color="0"> 
        <position x="91" y="1861.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FP]++;
no_need_scheduler_fp(Ready_Task_GPU,
List_GPU, 33);
]]></update> 
  </transition> 

  <transition id="34" identifier="TransitionPass26" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="70" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="331" y="661.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[TragetTsub25 = 0;
]]></update> 
  </transition> 

  <transition id="41" identifier="StartTsub29" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="70" cost="0" unctrl="1" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="541" y="781.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched[FIFO]++;
insert_GPU_task(List_Task,
Ready_Task_GPU, 29);]]></update> 
  </transition> 

  <transition id="43" identifier="ExecTsub29" label=""  eft="30" lft="35" eft_param="30" lft_param="35" speed="1" priority="0" cost="0" unctrl="1" obs="1"  guard="is_selected_task_GPU(List_GPU, 29)"> 
     <graphics color="0"> 
        <position x="541" y="961.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FIFO]++;
no_need_scheduler_fifo(Ready_Task_GPU,
List_GPU, 29);
]]></update> 
  </transition> 

  <transition id="49" identifier="TransitionPass32" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="70" cost="0" unctrl="1" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="631" y="1171.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="50" identifier="StartTsub30" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="70" cost="0" unctrl="1" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="781" y="781.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched[FIFO]++;
insert_GPU_task(List_Task,
Ready_Task_GPU, 30);]]></update> 
  </transition> 

  <transition id="52" identifier="ExecTsub30" label=""  eft="30" lft="35" eft_param="30" lft_param="35" speed="1" priority="0" cost="0" unctrl="1" obs="1"  guard="is_selected_task_GPU(List_GPU, 30)"> 
     <graphics color="0"> 
        <position x="781" y="961.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FIFO]++;
no_need_scheduler_fifo(Ready_Task_GPU,
List_GPU, 30);
]]></update> 
  </transition> 

  <transition id="54" identifier="ExecTsub23" label=""  eft="10" lft="15" eft_param="10" lft_param="15" speed="1" priority="0" cost="0" unctrl="1" obs="1"  guard="is_selected_task_CPU(List_CPU, 23)"> 
     <graphics color="0"> 
        <position x="1291" y="481.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched[FP]++;
no_need_scheduler_fp(Ready_Task_CPU,
List_CPU, 23);
]]></update> 
  </transition> 

  <transition id="55" identifier="TASK0_is_ready" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="ReadyTsub22 && ReadyTsub23"> 
     <graphics color="0"> 
        <position x="181" y="2041.0"/> 
        <deltaLabel deltax="-1.0" deltay="-25.0"/> 
        <deltaGuard deltax="11.0" deltay="12.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="56" identifier="TASK0_is_susp" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="Susp33"> 
     <graphics color="0"> 
        <position x="181" y="2131.0"/> 
        <deltaLabel deltax="67.0" deltay="-18.0"/> 
        <deltaGuard deltax="10.0" deltay="10.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="58" identifier="TASK0_deadline" label=""  eft="300" lft="300" eft_param="300" lft_param="300" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="361" y="2041.0"/> 
        <deltaLabel deltax="-1.0" deltay="-25.0"/> 
        <deltaGuard deltax="11.0" deltay="12.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <arc place="1" transition="3" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="2" transition="3" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="2" transition="4" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="1" transition="4" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="5" transition="7" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="6" transition="7" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="6" transition="8" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="5" transition="8" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="11" transition="11" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="53" transition="11" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="11" transition="12" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="17" transition="12" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="19" transition="18" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="17" transition="18" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="19" transition="18" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="20" transition="18" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="20" transition="20" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="21" transition="20" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="21" transition="22" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="23" transition="22" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="23" transition="24" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="29" transition="24" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="29" transition="30" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="31" transition="30" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="33" transition="32" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="31" transition="32" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="17" transition="34" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="35" transition="34" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="35" transition="34" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="40" transition="34" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="40" transition="41" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="42" transition="41" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="42" transition="43" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="48" transition="43" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="48" transition="49" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="29" transition="49" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="40" transition="50" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="51" transition="50" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="51" transition="52" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="48" transition="52" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="53" transition="54" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="17" transition="54" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="54" transition="55" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="57" transition="55" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="57" transition="56" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="54" transition="56" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="57" transition="58" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="59" transition="58" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <timedCost></timedCost>

  <nbTokenColor>0</nbTokenColor>

  <declaration><![CDATA[// insert here your type definitions using C-like syntax

// insert here your function definitions
// using C-like syntax

const int TASK_COUNT = 12;
// const int CORE_COUNT = 3;
const int CPU_COUNT = 2;
const int GPU_COUNT = 1;
const int FIFO = 0;
const int FP = 1;


/* Task data structures */

typedef enum{
    SUSPENDED,
    READY,
    RUNNING
}task_state;

typedef enum{
    GPU,
    CPU,
    UNKOWN
}task_core;

typedef struct{
	task_state state;
    task_core core;
	int id;
	int Priority;
}task_descriptor;


typedef enum{
    ACTIVE,
    IDLE
}core_state;

typedef enum{
    GPU,
    CPU,
    UNKOWN
}core_type;

typedef struct{
    core_state state;
    core_type type;
    int id;
    int selected_task;
}core_descriptor;


/* Task lists + mainting functions*/

task_descriptor tri_fp(task_descriptor [TASK_COUNT] Ready_Task_CPU) {
    task_descriptor [TASK_COUNT] cpu_tasks;
    int cpu_count = 0;

    // Récupération des tâches CPU
    for (int i = 0; i < TASK_COUNT; i++) {
        if (Ready_Task_CPU[i].id != -1 && Ready_Task_CPU[i].core == CPU) {
            cpu_tasks[cpu_count] = Ready_Task_CPU[i];
            cpu_count++;
        }
    }

    // Tri FP (priorité décroissante) sur les tâches CPU
    for (int i = 0; i < cpu_count - 1; i++) {
        for (int j = i + 1; j < cpu_count; j++) {
            if (cpu_tasks[i].Priority < cpu_tasks[j].Priority) {
                task_descriptor tmp = cpu_tasks[i];
                cpu_tasks[i] = cpu_tasks[j];
                cpu_tasks[j] = tmp;
            }
        }
    }

    // Réécriture dans Ready_Task[0] (CPU)
    for (int i = 0; i < TASK_COUNT; i++) {
        if (i < cpu_count) {
            Ready_Task_CPU[i] = cpu_tasks[i];
        } else {
            Ready_Task_CPU[i].id = -1;
            Ready_Task_CPU[i].Priority = -1;
            Ready_Task_CPU[i].state = SUSPENDED;
            Ready_Task_CPU[i].core = UNKOWN;
        }
    }
    return Ready_Task_CPU;
}

task_descriptor list_fifo(task_descriptor [TASK_COUNT] Ready_Task_GPU) {
    task_descriptor [TASK_COUNT] gpu_tasks;
    int gpu_count = 0;

    // Récupération des tâches GPU
    for (int i = 0; i < TASK_COUNT; i++) {
        if (Ready_Task_GPU[i].id != -1 && Ready_Task_GPU[i].core == GPU) {
            gpu_tasks[gpu_count] = Ready_Task_GPU[i];
            gpu_count++;
        }
    }

    // Mettre d’abord les tâches READY

    int ready_index = 0;
    for (int i = 0; i < gpu_count; i++) {
        if (gpu_tasks[i].state == READY) {
            Ready_Task_GPU[ready_index] = gpu_tasks[i];
            ready_index++;
        }
    }

    // Réécriture dans Ready_Task[1] (GPU) : FIFO => pas de tri
    for (int i = ready_index; i < TASK_COUNT; i++) {
        Ready_Task_GPU[i].id = -1;
        Ready_Task_GPU[i].Priority = -1;
        Ready_Task_GPU[i].state = SUSPENDED;
        Ready_Task_GPU[i].core = UNKOWN;
    }
    return Ready_Task_GPU;
}

void insert_CPU_task(task_descriptor [TASK_COUNT] &List_Task, task_descriptor [TASK_COUNT] &Ready_Task_CPU, int id) {
    int i;
    int index = -1;
    int null_index = -1;
    int already_exists = 0;

    i = 0;
    while (i < TASK_COUNT && index == -1) {
        if (List_Task[i].id == id) {
            index = i;
        }
        i = i + 1;
    }

    i = 0;
    while (i < TASK_COUNT && already_exists == 0) {
        if (Ready_Task_CPU[i].id == id) {
            already_exists = 1;
        }
        i = i + 1;
    }

    if (already_exists == 0 && index != -1) {
        i = 0;
        while (i < TASK_COUNT && null_index == -1) {
            if (Ready_Task_CPU[i].id == -1) {
                null_index = i;
            }
            i = i + 1;
        }

        if (null_index != -1) {
            i = null_index;
            while (i < TASK_COUNT - 1) {
                Ready_Task_CPU[i] = Ready_Task_CPU[i + 1];
                i = i + 1;
            }
            Ready_Task_CPU[TASK_COUNT - 1].id = -1;
        }

        i = 0;
        int position_insertion = -1;
        while (i < TASK_COUNT && position_insertion == -1) {
            if (Ready_Task_CPU[i].id == -1) {
                position_insertion = i;
            }
            i = i + 1;
        }
        if (position_insertion != -1) {
            Ready_Task_CPU[position_insertion] = List_Task[index];
            Ready_Task_CPU[position_insertion].state = READY;
        }
    }
}

void insert_GPU_task(task_descriptor [TASK_COUNT] &List_Task, task_descriptor [TASK_COUNT] &Ready_Task_GPU, int id) {
    int i;
    int index = -1;
    int null_index = -1;
    int already_exists = 0;

    i = 0;
    while (i < TASK_COUNT && index == -1) {
        if (List_Task[i].id == id) {
            index = i;
        }
        i = i + 1;
    }

    i = 0;
    while (i < TASK_COUNT && already_exists == 0) {
        if (Ready_Task_GPU[i].id == id) {
            already_exists = 1;
        }
        i = i + 1;
    }

    if (already_exists == 0 && index != -1) {
        i = 0;
        while (i < TASK_COUNT && null_index == -1) {
            if (Ready_Task_GPU[i].id == -1) {
                null_index = i;
            }
            i = i + 1;
        }

        if (null_index != -1) {
            i = null_index;
            while (i < TASK_COUNT - 1) {
                Ready_Task_GPU[i] = Ready_Task_GPU[i + 1];
                i = i + 1;
            }
            Ready_Task_GPU[TASK_COUNT - 1].id = -1;
        }

        i = 0;
        int position_insertion = -1;
        while (i < TASK_COUNT && position_insertion == -1) {
            if (Ready_Task_GPU[i].id == -1) {
                position_insertion = i;
            }
            i = i + 1;
        }
        if (position_insertion != -1) {
            Ready_Task_GPU[position_insertion] = List_Task[index];
            Ready_Task_GPU[position_insertion].state = READY;
        }
    }
}

/* Core API */

int is_selected_task_CPU(core_descriptor [CPU_COUNT] &List_CPU, int id){
    int i;
    for(i=0; i < CPU_COUNT; i++){
        if(List_CPU[i].selected_task == id){
            return 1;
        }
    }
return 0;
}

int is_selected_task_GPU(core_descriptor [GPU_COUNT] &List_GPU, int id){
    int i;
    for(i=0; i < GPU_COUNT; i++){
        if(List_GPU[i].selected_task == id){
            return 1;
        }
    }
return 0;
}

/* Scheduler functions */

void scheduler_fp(task_descriptor [TASK_COUNT] &Ready_Task_CPU, core_descriptor [CPU_COUNT] &List_CPU){
    Ready_Task_CPU = tri_fp(Ready_Task_CPU);

    int task_found = 0;
    int i = 0;

    while (i < TASK_COUNT && task_found == 0) {
        int task_id = Ready_Task_CPU[i].id;
        int j = 0;
        int already_assigned = 0;

        while (j < CPU_COUNT) {
            if (List_CPU[j].selected_task == task_id) {
                already_assigned = 1;
            }
            j++;
        }

        if (already_assigned == 0 && task_id != -1) {
            int assigned = 0;
            j = 0;

            while (j < CPU_COUNT && assigned == 0) {

                if (List_CPU[j].selected_task == -1) {
                    List_CPU[j].state = ACTIVE;
                    List_CPU[j].selected_task = task_id;
                    assigned = 1;
                    task_found = 1;
                }
                j++;
            }
        }
        i++;
    }
}

void scheduler_fifo(task_descriptor [TASK_COUNT] &Ready_Task_GPU, core_descriptor [GPU_COUNT] &List_GPU){
    Ready_Task_GPU = list_fifo(Ready_Task_GPU);

    int task_found = 0;
    int i = 0;

    while (i < TASK_COUNT && task_found == 0) {
        int task_id = Ready_Task_GPU[i].id;
        int j = 0;
        int already_assigned = 0;

        while (j < GPU_COUNT) {
            if (List_GPU[j].selected_task == task_id) {
                already_assigned = 1;
            }
            j++;
        }

        if (already_assigned == 0 && task_id != -1) {
            int assigned = 0;
            j = 0;

            while (j < GPU_COUNT && assigned == 0) {

                if (List_GPU[j].selected_task == -1) {
                    List_GPU[j].state = ACTIVE;
                    List_GPU[j].selected_task = task_id;
                    assigned = 1;
                    task_found = 1;
                }
                j++;
            }
        }
        i++;
    }
}

void no_need_scheduler_fp(task_descriptor [TASK_COUNT] &Ready_Task_CPU, core_descriptor [CPU_COUNT] &List_CPU, int id){
    int i;

    for(i = 0; i < TASK_COUNT; i++){
        if(Ready_Task_CPU[i].id == id){
            Ready_Task_CPU[i].state = SUSPENDED;
            Ready_Task_CPU[i].id = -1;
            Ready_Task_CPU[i].Priority = -1;
        }
    }

    for(i = 0; i < CPU_COUNT; i++){
        if(List_CPU[i].selected_task == id){
            List_CPU[i].state = IDLE;
            List_CPU[i].selected_task = -1;
        }
    }

    Ready_Task_CPU = tri_fp(Ready_Task_CPU);
}

void no_need_scheduler_fifo(task_descriptor [TASK_COUNT] &Ready_Task_GPU, core_descriptor [GPU_COUNT] &List_GPU, int id){
    int i;

    for(i = 0; i < TASK_COUNT; i++){
        if(Ready_Task_GPU[i].id == id){
            Ready_Task_GPU[i].state = SUSPENDED;
            Ready_Task_GPU[i].id = -1;
            Ready_Task_GPU[i].Priority = -1;
        }
    }

    for(i=0; i < GPU_COUNT; i++){
        if(List_GPU[i].selected_task == id){
            List_GPU[i].state = IDLE;
            List_GPU[i].selected_task = -1;
        }
    }

    Ready_Task_GPU = list_fifo(Ready_Task_GPU);
}


initially {

    int selected_task = -1;

        int [2] need_sched = { 0, 0 };
        int [2] no_need_sched = { 0, 0 };


    /* Task Declaration */
    task_descriptor [TASK_COUNT] List_Task;

    List_Task[0].state = SUSPENDED;
    List_Task[0].core = CPU;
    List_Task[0].id = 22;
    List_Task[0].Priority = 1;

    List_Task[1].state = SUSPENDED;
    List_Task[1].core = CPU;
    List_Task[1].id = 23;
    List_Task[1].Priority = 1;

    List_Task[2].state = SUSPENDED;
    List_Task[2].core = CPU;
    List_Task[2].id = 25;
    List_Task[2].Priority = 7;

    List_Task[3].state = SUSPENDED;
    List_Task[3].core = GPU;
    List_Task[3].id = 27;
    List_Task[3].Priority = -1;

    List_Task[4].state = SUSPENDED;
    List_Task[4].core = CPU;
    List_Task[4].id = 28;
    List_Task[4].Priority = 10;

    List_Task[5].state = SUSPENDED;
    List_Task[5].core = GPU;
    List_Task[5].id = 29;
    List_Task[5].Priority = -1;

    List_Task[6].state = SUSPENDED;
    List_Task[6].core = GPU;
    List_Task[6].id = 30;
    List_Task[6].Priority = -1;

    List_Task[7].state = SUSPENDED;
    List_Task[7].core = GPU;
    List_Task[7].id = 33;
    List_Task[7].Priority = 11;


    int i;

    task_descriptor [TASK_COUNT] Ready_Task_GPU;

    for(i = 0; i < TASK_COUNT; i++){
            Ready_Task_GPU[i].state = SUSPENDED;
            Ready_Task_GPU[i].core = GPU;
		    Ready_Task_GPU[i].id = -1;
		    Ready_Task_GPU[i].Priority = -1;
	}

    task_descriptor [TASK_COUNT] Ready_Task_CPU;

    for(i = 0; i < TASK_COUNT; i++){
            Ready_Task_CPU[i].state = SUSPENDED;
            Ready_Task_CPU[i].core = CPU;
		    Ready_Task_CPU[i].id = -1;
		    Ready_Task_CPU[i].Priority = -1;
	}


    core_descriptor [CPU_COUNT] List_CPU;

    List_CPU[0].state = IDLE;
    List_CPU[0].type = CPU;
    List_CPU[0].id = 0;
    List_CPU[0].selected_task = -1;


    List_CPU[1].state = IDLE;
    List_CPU[1].type = CPU;
    List_CPU[1].id = 1;
    List_CPU[1].selected_task = -1;

    core_descriptor [GPU_COUNT] List_GPU;

    List_GPU[0].state = IDLE;
    List_GPU[0].type = GPU;
    List_GPU[0].id = 2;
    List_GPU[0].selected_task = -1;




}

]]></declaration>

  <project nbinput="0" openinput="0" nbinclude="0" >
 </project>

  <preferences> 
      <colorPlace  c0="SkyBlue2"  c1="#ffbebe"  c2="cyan"  c3="green"  c4="yellow"  c5="brown" /> 
 
      <colorTransition  c0="yellow"  c1="gray"  c2="cyan"  c3="green"  c4="SkyBlue2"  c5="brown" /> 
 
      <colorArc  c0="black"  c1="gray"  c2="blue"  c3="#beb760"  c4="#be5c7e"  c5="#46be90" /> 
 
  </preferences> 
 </TPN> 

  </romeo>
