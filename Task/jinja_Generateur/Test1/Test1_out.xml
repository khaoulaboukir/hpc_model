<?xml version="1.0" encoding="UTF-8" ?>
<romeo version="Romeo v3.10.2">
<TPN name="/media/khalil-hamdoune/Khalil/Application/romeo-3.10.2/Test Jinja/Test1/Test1_out.xml">
  <place id="1" identifier="CPU" label="" initialMarking="2" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="601.0" y="61.0"/> 
         <deltaLabel deltax="0.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="2" identifier="GPU" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="601.0" y="181.0"/> 
         <deltaLabel deltax="3.0" deltay="13.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="3" identifier="Active_core" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="511.0" y="121.0"/> 
         <deltaLabel deltax="-56.0" deltay="-7.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="4" identifier="Executing_core" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="691.0" y="121.0"/> 
         <deltaLabel deltax="54.0" deltay="-6.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="10" identifier="ReadyT0" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="181.0" y="271.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="11" identifier="SuspT0" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="361.0" y="271.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="12" identifier="ReadyT1" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="601.0" y="271.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="13" identifier="SuspT1" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="781.0" y="271.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="14" identifier="ReadyT2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1021.0" y="271.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="15" identifier="SuspT2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1201.0" y="271.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="16" identifier="ReadyT3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="181.0" y="391.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="17" identifier="SuspT3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="361.0" y="391.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="18" identifier="ReadyT4" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="601.0" y="391.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="19" identifier="SuspT4" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="781.0" y="391.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="20" identifier="ReadyT5" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1021.0" y="391.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="21" identifier="SuspT5" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1201.0" y="391.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <transition id="5" identifier="Call_CPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="50" cost="0" unctrl="0" obs="1"  guard="cpu_flag #greater 0"> 
     <graphics color="0"> 
        <position x="361.0" y="61.0"/> 
        <deltaLabel deltax="9.0" deltay="-29.0"/> 
        <deltaGuard deltax="0.0" deltay="14.0"/> 
        <deltaUpdate deltax="0.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[cpu_flag--;]]></update> 
  </transition> 

  <transition id="6" identifier="Call_GPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="50" cost="0" unctrl="0" obs="1"  guard="gpu_flag #greater 0"> 
     <graphics color="0"> 
        <position x="361.0" y="181.0"/> 
        <deltaLabel deltax="9.0" deltay="-33.0"/> 
        <deltaGuard deltax="5.0" deltay="7.0"/> 
        <deltaUpdate deltax="6.0" deltay="19.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[gpu_flag--;]]></update> 
  </transition> 

  <transition id="7" identifier="SCHED" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="need_sched #greater 0"> 
     <graphics color="0"> 
        <position x="601.0" y="121.0"/> 
        <deltaLabel deltax="1.0" deltay="-30.0"/> 
        <deltaGuard deltax="0.0" deltay="12.0"/> 
        <deltaUpdate deltax="20.0" deltay="25.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[scheduler(Sorted_Task, List_Core);
need_sched--;]]></update> 
  </transition> 

  <transition id="8" identifier="Terminate_CPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="no_need_cpu #greater 0"> 
     <graphics color="0"> 
        <position x="841.0" y="61.0"/> 
        <deltaLabel deltax="68.0" deltay="-10.0"/> 
        <deltaGuard deltax="19.0" deltay="12.0"/> 
        <deltaUpdate deltax="12.0" deltay="22.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu--;]]></update> 
  </transition> 

  <transition id="9" identifier="Terminate_GPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="no_need_gpu #greater 0"> 
     <graphics color="0"> 
        <position x="841.0" y="181.0"/> 
        <deltaLabel deltax="64.0" deltay="-10.0"/> 
        <deltaGuard deltax="17.0" deltay="12.0"/> 
        <deltaUpdate deltax="15.0" deltay="21.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_gpu--;]]></update> 
  </transition> 

  <transition id="100" identifier="StartT0" label=""  eft="100" lft="100" eft_param="100" lft_param="100" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="91.0" y="271.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 0);
     ]]></update> 
  </transition> 

  <transition id="101" identifier="ExecT0" label=""  eft="75" lft="80" eft_param="75" lft_param="80" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 0)"> 
     <graphics color="0"> 
        <position x="271.0" y="271.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
free_core(List_Core, 0);
no_need_cpu++;
no_need_scheduler(Sorted_Task, 0);
     ]]></update> 
  </transition> 

  <transition id="102" identifier="StartT1" label=""  eft="80" lft="80" eft_param="80" lft_param="80" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="511.0" y="271.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 1);
     ]]></update> 
  </transition> 

  <transition id="103" identifier="ExecT1" label=""  eft="55" lft="60" eft_param="55" lft_param="60" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 1)"> 
     <graphics color="0"> 
        <position x="691.0" y="271.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
free_core(List_Core, 1);
no_need_cpu++;
no_need_scheduler(Sorted_Task, 1);
     ]]></update> 
  </transition> 

  <transition id="104" identifier="StartT2" label=""  eft="105" lft="105" eft_param="105" lft_param="105" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="931.0" y="271.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
need_sched++;
gpu_flag++;
insert_task(List_Task, Sorted_Task, 2);
     ]]></update> 
  </transition> 

  <transition id="105" identifier="ExecT2" label=""  eft="45" lft="50" eft_param="45" lft_param="50" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 2)"> 
     <graphics color="0"> 
        <position x="1111.0" y="271.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
free_core(List_Core, 2);
no_need_gpu++;
no_need_scheduler(Sorted_Task, 2);
     ]]></update> 
  </transition> 

  <transition id="106" identifier="StartT3" label=""  eft="70" lft="70" eft_param="70" lft_param="70" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="91.0" y="391.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
need_sched++;
gpu_flag++;
insert_task(List_Task, Sorted_Task, 3);
     ]]></update> 
  </transition> 

  <transition id="107" identifier="ExecT3" label=""  eft="45" lft="50" eft_param="45" lft_param="50" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 3)"> 
     <graphics color="0"> 
        <position x="271.0" y="391.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
free_core(List_Core, 3);
no_need_gpu++;
no_need_scheduler(Sorted_Task, 3);
     ]]></update> 
  </transition> 

  <transition id="108" identifier="StartT4" label=""  eft="50" lft="50" eft_param="50" lft_param="50" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="511.0" y="391.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 4);
     ]]></update> 
  </transition> 

  <transition id="109" identifier="ExecT4" label=""  eft="40" lft="45" eft_param="40" lft_param="45" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 4)"> 
     <graphics color="0"> 
        <position x="691.0" y="391.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
free_core(List_Core, 4);
no_need_cpu++;
no_need_scheduler(Sorted_Task, 4);
     ]]></update> 
  </transition> 

  <transition id="110" identifier="StartT5" label=""  eft="120" lft="120" eft_param="120" lft_param="120" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="931.0" y="391.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 5);
     ]]></update> 
  </transition> 

  <transition id="111" identifier="ExecT5" label=""  eft="95" lft="100" eft_param="95" lft_param="100" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 5)"> 
     <graphics color="0"> 
        <position x="1111.0" y="391.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[
free_core(List_Core, 5);
no_need_cpu++;
no_need_scheduler(Sorted_Task, 5);
     ]]></update> 
  </transition> 

  <arc place="1" transition="5" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="3" transition="5" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="2" transition="6" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="3" transition="6" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="3" transition="7" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="4" transition="7" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="4" transition="8" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="1" transition="8" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="4" transition="9" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="2" transition="9" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="10" transition="100" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="10" transition="101" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="11" transition="101" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="12" transition="102" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="12" transition="103" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="13" transition="103" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="14" transition="104" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="14" transition="105" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="15" transition="105" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="16" transition="106" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="16" transition="107" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="17" transition="107" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="18" transition="108" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="18" transition="109" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="19" transition="109" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="20" transition="110" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="20" transition="111" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="21" transition="111" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <timedCost></timedCost>

  <nbTokenColor>0</nbTokenColor>

  <declaration><![CDATA[// insert here your type definitions using C-like syntax

// insert here your function definitions
// using C-like syntax


const int TASK_COUNT = 6;
const int CORE_COUNT = 3;



/* Task data structures */

typedef enum{
    SUSPENDED,
    READY,
    RUNNING
}task_state;

typedef enum{
    CPU,
    GPU,
    BOTH,
    UNKOWN
}task_core;

typedef struct{
	task_state state;
    task_core core;
	int id;
	int Priority;
}task_descriptor;


typedef enum{
    ACTIVE,
    IDLE
}core_state;

typedef enum{
    GPU,
    CPU
}core_type;

typedef struct{
    core_state state;
    core_type type;
    int id;
    int selected_task;
}core_descriptor;


/* Task lists + mainting functions*/

task_descriptor sort_list(task_descriptor [TASK_COUNT] Sorted_Task) {
    int i, j, index = 0;

    task_descriptor [TASK_COUNT] cpu_tasks;
    task_descriptor [TASK_COUNT] gpu_tasks;
    task_descriptor [TASK_COUNT] unknown_tasks;

    int cpu_count = 0;
    int gpu_count = 0;
    int unk_count = 0;

    for (i = 0; i < TASK_COUNT; i++) {
        if (Sorted_Task[i].id != -1) {
            if (Sorted_Task[i].core == CPU) {
                cpu_tasks[cpu_count] = Sorted_Task[i];
                cpu_count++;
            } else if (Sorted_Task[i].core == GPU) {
                gpu_tasks[gpu_count] = Sorted_Task[i];
                gpu_count++;
            } else {
                unknown_tasks[unk_count] = Sorted_Task[i];
                unk_count++;
            }
        }
    }

    for (i = 0; i < cpu_count - 1; i++) {
        for (j = i + 1; j < cpu_count; j++) {
            if (cpu_tasks[i].Priority < cpu_tasks[j].Priority) {
                task_descriptor temp = cpu_tasks[i];
                cpu_tasks[i] = cpu_tasks[j];
                cpu_tasks[j] = temp;
            }
        }
    }

    index = 0;
    for (i = 0; i < cpu_count; i++) {
        Sorted_Task[index] = cpu_tasks[i];
        index++;
    }
    for (i = 0; i < gpu_count; i++) {
        Sorted_Task[index] = gpu_tasks[i];
        index++;
    }
    for (i = 0; i < unk_count; i++) {
        Sorted_Task[index] = unknown_tasks[i];
        index++;
    }

    while (index < TASK_COUNT) {
        Sorted_Task[index].id = -1;
        Sorted_Task[index].Priority = -1;
        Sorted_Task[index].state = SUSPENDED;
        Sorted_Task[index].core = UNKOWN;
        index++;
    }

    return Sorted_Task;
}

void insert_task(task_descriptor [TASK_COUNT] &List_Task, task_descriptor [TASK_COUNT] &Sorted_Task, int id) {
    int i;
    int index = -1;
    int null_index = -1;
    int already_exists = 0;

    i = 0;
    while (i < TASK_COUNT && index == -1) {
        if (List_Task[i].id == id) {
            index = i;
        }
        i = i + 1;
    }

    i = 0;
    while (i < TASK_COUNT && already_exists == 0) {
        if (Sorted_Task[i].id == id) {
            already_exists = 1;
        }
        i = i + 1;
    }

    if (already_exists == 0 && index != -1) {
        i = 0;
        while (i < TASK_COUNT && null_index == -1) {
            if (Sorted_Task[i].id == -1) {
                null_index = i;
            }
            i = i + 1;
        }

        if (null_index != -1) {
            i = null_index;
            while (i < TASK_COUNT - 1) {
                Sorted_Task[i] = Sorted_Task[i + 1];
                i = i + 1;
            }
            Sorted_Task[TASK_COUNT - 1].id = -1;
        }

        i = 0;
        int position_insertion = -1;
        while (i < TASK_COUNT + 10 && position_insertion == -1) {
            if (Sorted_Task[i].id == -1) {
                position_insertion = i;
            }
            i = i + 1;
        }

        if (position_insertion != -1) {
            Sorted_Task[position_insertion] = List_Task[index];
            Sorted_Task[position_insertion].state = READY;
        }
    }
}


/* Core API */


int is_selected_task(core_descriptor [CORE_COUNT] &List_Core, int id){
    int i;
    for(i=0; i < CORE_COUNT; i++){
        if(List_Core[i].selected_task == id){
            return 1;
        }
    }
return 0;
}


/* Scheduler functions */

void scheduler(task_descriptor [TASK_COUNT] &Sorted_Task, core_descriptor [CORE_COUNT] &List_Core){
    Sorted_Task = sort_list(Sorted_Task);
    int i = 0;
    int task_found = 0;

    while (i < TASK_COUNT && task_found == 0) {
        int task_id = Sorted_Task[i].id;
        task_core required_core = Sorted_Task[i].core;
        int already_assigned = 0;

        int j = 0;
        while (j < CORE_COUNT) {
            if (List_Core[j].selected_task == task_id) {
                already_assigned = 1;
            }
            j++;
        }

        if (already_assigned == 0 && task_id != -1) {
            int assigned = 0;
            j = 0;

            if (required_core == BOTH) {
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == -1 && List_Core[j].type == CPU) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }

                j = 0;
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == -1 && List_Core[j].type == GPU) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }
            }
            else {
                j = 0;
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == -1 && List_Core[j].type == required_core) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }
            }
        }

        i++;
    }
}

void no_need_scheduler(task_descriptor [TASK_COUNT] &Sorted_Task, int id){
    int i;
    int removed = 0;

    for(i = 0; i < TASK_COUNT; i++){
        if(Sorted_Task[i].id == id && removed == 0){
            Sorted_Task[i].state = SUSPENDED;
            Sorted_Task[i].core = UNKOWN;
            Sorted_Task[i].id = -1;
            Sorted_Task[i].Priority = -1;
            removed = 1;
        }
    }

    Sorted_Task = sort_list(Sorted_Task);
}


/* Task API */

void free_core(core_descriptor [CORE_COUNT] &List_Core, int id){
    int i;
    for(i=0; i < CORE_COUNT; i++){
        if(List_Core[i].selected_task == id){
            List_Core[i].state = IDLE;
            List_Core[i].selected_task = -1;
        }
    }
}


initially {

    
    
    int cpu_flag = 0;
    
    int gpu_flag = 0;
    
    int need_sched = 0;
    
    int no_need_cpu = 0;
    
    int no_need_gpu = 0;
    
    int selected_task = -1;
    

    /* Task Declaration */
    task_descriptor [TASK_COUNT] List_Task;
    
    List_Task[0].state = SUSPENDED;
    List_Task[0].core = CPU;
    List_Task[0].id = 0;
    List_Task[0].Priority = 6;
    
    List_Task[1].state = SUSPENDED;
    List_Task[1].core = CPU;
    List_Task[1].id = 1;
    List_Task[1].Priority = 8;
    
    List_Task[2].state = SUSPENDED;
    List_Task[2].core = GPU;
    List_Task[2].id = 2;
    List_Task[2].Priority = -1;
    
    List_Task[3].state = SUSPENDED;
    List_Task[3].core = GPU;
    List_Task[3].id = 3;
    List_Task[3].Priority = -1;
    
    List_Task[4].state = SUSPENDED;
    List_Task[4].core = CPU;
    List_Task[4].id = 4;
    List_Task[4].Priority = 10;
    
    List_Task[5].state = SUSPENDED;
    List_Task[5].core = CPU;
    List_Task[5].id = 5;
    List_Task[5].Priority = 4;
    

    task_descriptor [TASK_COUNT] Sorted_Task;
    int i;
    for(i = 0; i < TASK_COUNT; i++){
        Sorted_Task[i].state = SUSPENDED;
        Sorted_Task[i].core = UNKOWN;
        Sorted_Task[i].id = -1;
        Sorted_Task[i].Priority = -1;
    }

    /* Core Declaration */
    core_descriptor [CORE_COUNT] List_Core;
    
    List_Core[0].state = IDLE;
    List_Core[0].type = CPU;
    List_Core[0].id = 0;
    List_Core[0].selected_task = -1;
    
    List_Core[1].state = IDLE;
    List_Core[1].type = CPU;
    List_Core[1].id = 1;
    List_Core[1].selected_task = -1;
    
    List_Core[2].state = IDLE;
    List_Core[2].type = GPU;
    List_Core[2].id = 2;
    List_Core[2].selected_task = -1;
    

}

]]></declaration>

  <project nbinput="0" openinput="0" nbinclude="0" >
 </project>

  <preferences> 
      <colorPlace  c0="SkyBlue2"  c1="#ffbebe"  c2="cyan"  c3="green"  c4="yellow"  c5="brown" /> 
 
      <colorTransition  c0="yellow"  c1="gray"  c2="cyan"  c3="green"  c4="SkyBlue2"  c5="brown" /> 
 
      <colorArc  c0="black"  c1="gray"  c2="blue"  c3="#beb760"  c4="#be5c7e"  c5="#46be90" /> 
 
  </preferences> 
 </TPN> 

  </romeo>
