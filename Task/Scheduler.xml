<?xml version="1.0" encoding="UTF-8" ?>
<romeo version="Romeo v3.10.2">
<TPN name="/media/khalil-hamdoune/Khalil/Application/romeo-3.10.2/Test/Test2/Scheduler.xml">
  <place id="1" identifier="Task_inprocess" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="571.0" y="121.0"/> 
         <deltaLabel deltax="2.0" deltay="14.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="2" identifier="Ressource" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="571.0" y="61.0"/> 
         <deltaLabel deltax="-1.0" deltay="-23.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="4" identifier="Completed_Task" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="811.0" y="121.0"/> 
         <deltaLabel deltax="4.0" deltay="11.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <transition id="1" identifier="Scheduler" label=""  eft="0" lft="inf" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="421.0" y="61.0"/> 
        <deltaLabel deltax="-1.0" deltay="-22.0"/> 
        <deltaGuard deltax="2.0" deltay="10.0"/> 
        <deltaUpdate deltax="-129.0" deltay="0.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[task_in_process = selected_Queue(Ready_Task);]]></update> 
  </transition> 

  <transition id="2" identifier="Terminate" label=""  eft="0" lft="inf" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="691.0" y="121.0"/> 
        <deltaLabel deltax="3.0" deltay="10.0"/> 
        <deltaGuard deltax="5.0" deltay="22.0"/> 
        <deltaUpdate deltax="9.0" deltay="38.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="3" identifier="Clock" label=""  eft="0" lft="inf" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="421.0" y="121.0"/> 
        <deltaLabel deltax="-40.0" deltay="-6.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <arc place="2" transition="1" type="PlaceTransition" weight="1" tokenColor="0"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="1" transition="1" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="1" transition="2" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="4" transition="2" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="2" transition="2" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="2" transition="3" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="1" transition="3" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <timedCost></timedCost>

  <nbTokenColor>0</nbTokenColor>

  <declaration><![CDATA[// insert here your type definitions using C-like syntax

// insert here your function definitions 
// using C-like syntax
const int Task_count = 2;
const int NULL = -1;
const int Waiting_Task = 1;

typedef enum{
	SUSPENDED, READY, RUNNING
}Task_Status;

typedef struct{
	Task_Status Status;
	int id;
	int Priority;
	int Period;
	int WCET;
}TASK;

TASK Add_Task(TASK [Task_count] List_Task, int id, int pr, int t, int w){
	List_Task[id].Status = SUSPENDED;
	List_Task[id].id = id;
	List_Task[id].Priority = pr;
	List_Task[id].Period = t;
	List_Task[id].WCET = w;
	return List_Task;
}

int is_Added_Task(TASK [Task_count] List_Task, int id){
	int i;
	for(i = 0; i < Task_count; i ++){
		if(List_Task[i].id == id){
			return 0;
		}
	}
	return 1;
}

// void reveil_Task(TASK [Task_count] List_Task, int id){
// 	if(List_Task[id].id == id){
// 		List_Task[id].Status = READY;
// 	}
// }

TASK reveil_Task(TASK [Task_count] List_Task, int id){
	int i;
	TASK [Task_count] Ready_Task;
	for(i = 0; i < Task_count; i++){
		Ready_Task[i] = List_Task[i];
	}
	if(Ready_Task[id].id == id){
		Ready_Task[id].Status = READY;
	}
	return Ready_Task;
}

int selected_Queue(TASK [Task_count] Ready_Task){
	int i,  j, max_idx;
	int selected_Task;
	TASK temp;
	TASK [Task_count] Queue_Task;
	for(i = 0; i < Task_count; i++){
		Queue_Task[i] = Ready_Task[i];
	}
	for (i = 0; i < Task_count - 1; i++) {
		max_idx = i;
		for (j = i + 1; j < Task_count; j++) {
			if (Queue_Task[j].Priority > Queue_Task[max_idx].Priority) {
				max_idx = j;
			}
		}
		if (max_idx != i) {
			temp = Queue_Task[i];
			Queue_Task[i] = Queue_Task[max_idx];
			Queue_Task[max_idx] = temp;
		}
	}
	selected_Task = Queue_Task[0].id;
	return selected_Task;
}

initially {
	int clock = 0, start_time = 0;
	int task_in_process = NULL;
	int wt = NULL;
	int Completed_Task = NULL;
	TASK [Task_count] List_Task;
	TASK [Task_count] Ready_Task;
	TASK [Task_count] Queue_Task;
	int i;
	for(i = 0; i < Task_count; i++){
		List_Task[i].Status = SUSPENDED;
		List_Task[i].id = NULL;
		List_Task[i].Priority = NULL;
		List_Task[i].Period = NULL;
		List_Task[i].WCET = NULL;
	}
// insert here the state variables declarations 
// and possibly some code to initialize them 
// using C-like syntax
}























































































]]></declaration>

  <project nbinput="1" openinput="1" nbinclude="0" >
      <input id="1"  file="Task1.xml"  status="open"/>
 </project>

  <preferences> 
      <colorPlace  c0="SkyBlue2"  c1="gray"  c2="cyan"  c3="green"  c4="yellow"  c5="brown" /> 
 
      <colorTransition  c0="yellow"  c1="gray"  c2="cyan"  c3="green"  c4="SkyBlue2"  c5="brown" /> 
 
      <colorArc  c0="black"  c1="gray"  c2="blue"  c3="#beb760"  c4="#be5c7e"  c5="#46be90" /> 
 
  </preferences> 
 </TPN> 

  </romeo>
