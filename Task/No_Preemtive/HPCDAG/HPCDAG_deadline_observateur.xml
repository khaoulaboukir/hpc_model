<?xml version="1.0" encoding="UTF-8" ?>
<romeo version="Romeo v3.10.2">
<TPN name="/media/khalil-hamdoune/Khalil/Application/romeo-3.10.2/Test/SCHED/No_Preemtive/HPCDAG/HPCDAG_deadline_observateur.xml">
  <place id="1" identifier="CPU" label="" initialMarking="2" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1351.0" y="511.0"/> 
         <deltaLabel deltax="0.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="2" identifier="ReadyT1" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="151.0" y="571.0"/> 
         <deltaLabel deltax="-2.0" deltay="-21.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="3" identifier="GPU" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1351.0" y="631.0"/> 
         <deltaLabel deltax="3.0" deltay="13.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="4" identifier="TASK1" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="631.0" y="61.0"/> 
         <deltaLabel deltax="0.0" deltay="-23.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="5" identifier="ReadyT2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="331.0" y="451.0"/> 
         <deltaLabel deltax="0.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="6" identifier="ReadyT3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="331.0" y="691.0"/> 
         <deltaLabel deltax="-6.0" deltay="12.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="7" identifier="AttendT3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="511.0" y="451.0"/> 
         <deltaLabel deltax="-1.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="8" identifier="AttendT2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="511.0" y="691.0"/> 
         <deltaLabel deltax="-9.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="9" identifier="TASK1_is_exec" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="811.0" y="61.0"/> 
         <deltaLabel deltax="6.0" deltay="-23.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="10" identifier="SuspT4" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="871.0" y="571.0"/> 
         <deltaLabel deltax="-1.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="11" identifier="TASK" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="571.0" y="691.0"/> 
         <deltaLabel deltax="7.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="12" identifier="TASK2" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="631.0" y="211.0"/> 
         <deltaLabel deltax="9.0" deltay="-21.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="13" identifier="ReadyTind1" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="151.0" y="61.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="14" identifier="SuspTind1" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="331.0" y="61.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="15" identifier="Executing_core" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1441.0" y="571.0"/> 
         <deltaLabel deltax="54.0" deltay="-6.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="16" identifier="Active_core" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1261.0" y="571.0"/> 
         <deltaLabel deltax="-56.0" deltay="-7.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="17" identifier="ReadyTind2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="151.0" y="211.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="18" identifier="SuspTind2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="331.0" y="211.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="19" identifier="ReadyTind3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="151.0" y="361.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="20" identifier="SuspTind3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="331.0" y="361.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="21" identifier="TASK2_is_exec" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="811.0" y="211.0"/> 
         <deltaLabel deltax="13.0" deltay="-19.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="22" identifier="TASK_is_exec" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="751.0" y="691.0"/> 
         <deltaLabel deltax="18.0" deltay="-19.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="23" identifier="TASK3" label="" initialMarking="1" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="631.0" y="361.0"/> 
         <deltaLabel deltax="7.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="24" identifier="TASK3_is_exec" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="811.0" y="361.0"/> 
         <deltaLabel deltax="18.0" deltay="-19.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="25" identifier="ReadyT4" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="691.0" y="571.0"/> 
         <deltaLabel deltax="-1.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="26" identifier="TASK_deadline_misses" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="931.0" y="691.0"/> 
         <deltaLabel deltax="76.0" deltay="-6.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="27" identifier="TASK3_deadline_misses" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="991.0" y="361.0"/> 
         <deltaLabel deltax="82.0" deltay="-6.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="28" identifier="TASK2_deadline_misses" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="991.0" y="211.0"/> 
         <deltaLabel deltax="79.0" deltay="-4.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="29" identifier="TASK1_deadline_misses" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="991.0" y="61.0"/> 
         <deltaLabel deltax="81.0" deltay="-5.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <transition id="1" identifier="T1ARR" label=""  eft="100" lft="100" eft_param="100" lft_param="100" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="61.0" y="571.0"/> 
        <deltaLabel deltax="0.0" deltay="-33.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="64.0" deltay="10.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 0);]]></update> 
  </transition> 

  <transition id="2" identifier="ExecT1" label=""  eft="15" lft="20" eft_param="15" lft_param="20" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 0)"> 
     <graphics color="0"> 
        <position x="241.0" y="571.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="92.0" deltay="-47.0"/> 
        <deltaUpdate deltax="128.0" deltay="-33.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 0);
no_need_cpu++;
no_need_scheduler(Sorted_Task, 0);
need_sched = need_sched + 2;
cpu_flag++; gpu_flag++;
insert_task(List_Task, Sorted_Task, 1);
insert_task(List_Task, Sorted_Task, 2);]]></update> 
  </transition> 

  <transition id="3" identifier="TASK1_is_ready" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="ReadyTind1 #eqeq 1"> 
     <graphics color="0"> 
        <position x="721.0" y="61.0"/> 
        <deltaLabel deltax="-1.0" deltay="-25.0"/> 
        <deltaGuard deltax="11.0" deltay="12.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="4" identifier="SCHED" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="need_sched #greater 0"> 
     <graphics color="0"> 
        <position x="1351.0" y="571.0"/> 
        <deltaLabel deltax="1.0" deltay="-30.0"/> 
        <deltaGuard deltax="0.0" deltay="12.0"/> 
        <deltaUpdate deltax="20.0" deltay="25.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[scheduler(Sorted_Task, List_Core);
need_sched--;]]></update> 
  </transition> 

  <transition id="5" identifier="Terminate_CPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="no_need_cpu #greater 0"> 
     <graphics color="0"> 
        <position x="1591.0" y="511.0"/> 
        <deltaLabel deltax="68.0" deltay="-10.0"/> 
        <deltaGuard deltax="19.0" deltay="12.0"/> 
        <deltaUpdate deltax="12.0" deltay="22.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu--;]]></update> 
  </transition> 

  <transition id="6" identifier="TASK1_deadline" label=""  eft="90" lft="90" eft_param="90" lft_param="90" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="901.0" y="61.0"/> 
        <deltaLabel deltax="6.0" deltay="10.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="7" identifier="ExecT2" label=""  eft="25" lft="30" eft_param="25" lft_param="30" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 1)"> 
     <graphics color="0"> 
        <position x="421.0" y="451.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="8.0" deltay="10.0"/> 
        <deltaUpdate deltax="30.0" deltay="23.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu++;
free_core(List_Core, 1);
no_need_scheduler(Sorted_Task, 1);]]></update> 
  </transition> 

  <transition id="8" identifier="ExecT3" label=""  eft="15" lft="20" eft_param="15" lft_param="20" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 2)"> 
     <graphics color="0"> 
        <position x="421.0" y="691.0"/> 
        <deltaLabel deltax="3.0" deltay="-30.0"/> 
        <deltaGuard deltax="8.0" deltay="8.0"/> 
        <deltaUpdate deltax="24.0" deltay="19.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_gpu++;
free_core(List_Core, 2);
no_need_scheduler(Sorted_Task, 2);]]></update> 
  </transition> 

  <transition id="9" identifier="TASK1_is_susp" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="SuspTind1 #eqeq 1"> 
     <graphics color="0"> 
        <position x="721.0" y="151.0"/> 
        <deltaLabel deltax="67.0" deltay="-18.0"/> 
        <deltaGuard deltax="10.0" deltay="10.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="10" identifier="ExecT4" label=""  eft="15" lft="20" eft_param="15" lft_param="20" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 3)"> 
     <graphics color="0"> 
        <position x="781.0" y="571.0"/> 
        <deltaLabel deltax="2.0" deltay="-29.0"/> 
        <deltaGuard deltax="5.0" deltay="8.0"/> 
        <deltaUpdate deltax="10.0" deltay="18.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 3);]]></update> 
  </transition> 

  <transition id="11" identifier="Terminate" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="10" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="961.0" y="571.0"/> 
        <deltaLabel deltax="-5.0" deltay="-29.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="6.0" deltay="8.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu++;
no_need_scheduler(Sorted_Task, 3);]]></update> 
  </transition> 

  <transition id="12" identifier="TASK2_is_ready" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="ReadyTind2 #eqeq 1"> 
     <graphics color="0"> 
        <position x="721.0" y="211.0"/> 
        <deltaLabel deltax="4.0" deltay="-25.0"/> 
        <deltaGuard deltax="8.0" deltay="13.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="13" identifier="Tind1" label=""  eft="100" lft="100" eft_param="100" lft_param="100" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="61.0" y="61.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 4);]]></update> 
  </transition> 

  <transition id="14" identifier="ExecTind1" label=""  eft="75" lft="80" eft_param="75" lft_param="80" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 4)"> 
     <graphics color="0"> 
        <position x="241.0" y="61.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 4);]]></update> 
  </transition> 

  <transition id="15" identifier="TerminateTind1" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="10" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="421.0" y="61.0"/> 
        <deltaLabel deltax="15.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu++;
no_need_scheduler(Sorted_Task, 4);]]></update> 
  </transition> 

  <transition id="16" identifier="Call_CPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="50" cost="0" unctrl="0" obs="1"  guard="cpu_flag #greater 0"> 
     <graphics color="0"> 
        <position x="1111.0" y="511.0"/> 
        <deltaLabel deltax="9.0" deltay="-29.0"/> 
        <deltaGuard deltax="0.0" deltay="14.0"/> 
        <deltaUpdate deltax="0.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[cpu_flag--;]]></update> 
  </transition> 

  <transition id="17" identifier="Call_GPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="50" cost="0" unctrl="0" obs="1"  guard="gpu_flag #greater 0"> 
     <graphics color="0"> 
        <position x="1111.0" y="631.0"/> 
        <deltaLabel deltax="9.0" deltay="-33.0"/> 
        <deltaGuard deltax="5.0" deltay="7.0"/> 
        <deltaUpdate deltax="6.0" deltay="19.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[gpu_flag--;]]></update> 
  </transition> 

  <transition id="18" identifier="Terminate_GPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="no_need_gpu #greater 0"> 
     <graphics color="0"> 
        <position x="1591.0" y="631.0"/> 
        <deltaLabel deltax="64.0" deltay="-10.0"/> 
        <deltaGuard deltax="17.0" deltay="12.0"/> 
        <deltaUpdate deltax="15.0" deltay="21.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_gpu--;]]></update> 
  </transition> 

  <transition id="19" identifier="Tind2" label=""  eft="80" lft="80" eft_param="80" lft_param="80" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="61.0" y="211.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 5);]]></update> 
  </transition> 

  <transition id="20" identifier="ExecTind2" label=""  eft="55" lft="60" eft_param="55" lft_param="60" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 5)"> 
     <graphics color="0"> 
        <position x="241.0" y="211.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 5);]]></update> 
  </transition> 

  <transition id="21" identifier="TerminateTind2" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="10" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="421.0" y="211.0"/> 
        <deltaLabel deltax="15.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu++;
no_need_scheduler(Sorted_Task, 5);]]></update> 
  </transition> 

  <transition id="22" identifier="Tind3" label=""  eft="105" lft="105" eft_param="105" lft_param="105" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="61.0" y="361.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="40.0" deltay="10.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
gpu_flag++;
insert_task(List_Task, Sorted_Task, 6);]]></update> 
  </transition> 

  <transition id="23" identifier="ExecTind3" label=""  eft="45" lft="50" eft_param="45" lft_param="50" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 6)"> 
     <graphics color="0"> 
        <position x="241.0" y="361.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 6);]]></update> 
  </transition> 

  <transition id="24" identifier="TerminateTind3" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="10" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="421.0" y="361.0"/> 
        <deltaLabel deltax="15.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_gpu++;
no_need_scheduler(Sorted_Task, 6);]]></update> 
  </transition> 

  <transition id="25" identifier="TASK2_deadline" label=""  eft="70" lft="70" eft_param="70" lft_param="70" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="901.0" y="211.0"/> 
        <deltaLabel deltax="11.0" deltay="10.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="26" identifier="TASK2_is_susp" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="SuspTind2 #eqeq 1"> 
     <graphics color="0"> 
        <position x="721.0" y="301.0"/> 
        <deltaLabel deltax="66.0" deltay="-13.0"/> 
        <deltaGuard deltax="16.0" deltay="10.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="27" identifier="TASK3_is_ready" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="ReadyTind3 #eqeq 1"> 
     <graphics color="0"> 
        <position x="721.0" y="361.0"/> 
        <deltaLabel deltax="10.0" deltay="-27.0"/> 
        <deltaGuard deltax="7.0" deltay="12.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="28" identifier="TASK3_deadline" label=""  eft="100" lft="100" eft_param="100" lft_param="100" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="901.0" y="361.0"/> 
        <deltaLabel deltax="5.0" deltay="10.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="29" identifier="TASK3_is_susp" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="SuspTind3 #eqeq 1"> 
     <graphics color="0"> 
        <position x="721.0" y="451.0"/> 
        <deltaLabel deltax="67.0" deltay="-15.0"/> 
        <deltaGuard deltax="20.0" deltay="8.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="30" identifier="TASK_is_ready" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="ReadyT1 #eqeq 1"> 
     <graphics color="0"> 
        <position x="661.0" y="691.0"/> 
        <deltaLabel deltax="8.0" deltay="-30.0"/> 
        <deltaGuard deltax="7.0" deltay="12.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="31" identifier="TASK_deadline" label=""  eft="90" lft="90" eft_param="90" lft_param="90" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="841.0" y="691.0"/> 
        <deltaLabel deltax="14.0" deltay="9.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="32" identifier="TASK_is_susp" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="SuspT4 #eqeq 1"> 
     <graphics color="0"> 
        <position x="661.0" y="781.0"/> 
        <deltaLabel deltax="63.0" deltay="-14.0"/> 
        <deltaGuard deltax="6.0" deltay="8.0"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[]]></update> 
  </transition> 

  <transition id="33" identifier="StartT4" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="20" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="601.0" y="571.0"/> 
        <deltaLabel deltax="-41.0" deltay="-15.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 3);]]></update> 
  </transition> 

  <transition id="34" identifier="Tind1_miss" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="TASK1_deadline_misses #eqeq 1"> 
     <graphics color="0"> 
        <position x="241.0" y="121.0"/> 
        <deltaLabel deltax="-49.0" deltay="-8.0"/> 
        <deltaGuard deltax="90.0" deltay="-12.0"/> 
        <deltaUpdate deltax="107.0" deltay="3.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 4);
need_sched--;
cpu_flag--;
no_need_scheduler(Sorted_Task, 4);]]></update> 
  </transition> 

  <transition id="35" identifier="Tind2_miss" label="T35"  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="TASK2_deadline_misses #eqeq 1"> 
     <graphics color="0"> 
        <position x="241.0" y="271.0"/> 
        <deltaLabel deltax="-62.0" deltay="-6.0"/> 
        <deltaGuard deltax="91.0" deltay="-12.0"/> 
        <deltaUpdate deltax="106.0" deltay="3.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 5);
need_sched--;
cpu_flag--;
no_need_scheduler(Sorted_Task, 5);]]></update> 
  </transition> 

  <transition id="36" identifier="Tind3_miss" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="TASK3_deadline_misses #eqeq 1"> 
     <graphics color="0"> 
        <position x="241.0" y="421.0"/> 
        <deltaLabel deltax="-51.0" deltay="-10.0"/> 
        <deltaGuard deltax="-37.0" deltay="15.0"/> 
        <deltaUpdate deltax="-24.0" deltay="25.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 6);
need_sched--;
gpu_flag--;
no_need_scheduler(Sorted_Task, 6);]]></update> 
  </transition> 

  <transition id="37" identifier="T1_miss" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="TASK_deadline_misses #eqeq 1"> 
     <graphics color="0"> 
        <position x="241.0" y="631.0"/> 
        <deltaLabel deltax="-43" deltay="-10"/> 
        <deltaGuard deltax="-70.0" deltay="12.0"/> 
        <deltaUpdate deltax="-57.0" deltay="25.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 0);
need_sched--;
cpu_flag--;
no_need_scheduler(Sorted_Task, 0);]]></update> 
  </transition> 

  <transition id="38" identifier="T4_miss" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="TASK_deadline_misses #eqeq 1"> 
     <graphics color="0"> 
        <position x="781.0" y="631.0"/> 
        <deltaLabel deltax="-47.0" deltay="-12.0"/> 
        <deltaGuard deltax="84.0" deltay="-24.0"/> 
        <deltaUpdate deltax="106.0" deltay="-11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 3);
need_sched--;
cpu_flag--;
no_need_scheduler(Sorted_Task, 3);]]></update> 
  </transition> 

  <transition id="39" identifier="T3_miss" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="TASK_deadline_misses #eqeq 1"> 
     <graphics color="0"> 
        <position x="331.0" y="751.0"/> 
        <deltaLabel deltax="-41.0" deltay="-10.0"/> 
        <deltaGuard deltax="44.0" deltay="11.0"/> 
        <deltaUpdate deltax="66.0" deltay="23.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 2);
need_sched--;
gpu_flag--;
no_need_scheduler(Sorted_Task, 2);]]></update> 
  </transition> 

  <transition id="40" identifier="T2_miss" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="100" cost="0" unctrl="0" obs="1"  guard="TASK_deadline_misses #eqeq 1"> 
     <graphics color="0"> 
        <position x="601.0" y="481.0"/> 
        <deltaLabel deltax="11.0" deltay="-34.0"/> 
        <deltaGuard deltax="47.0" deltay="8.0"/> 
        <deltaUpdate deltax="63.0" deltay="19.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 1);
need_sched--;
cpu_flag--;
no_need_scheduler(Sorted_Task, 1);]]></update> 
  </transition> 

  <arc place="2" transition="1" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="2" transition="2" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="5" transition="2" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="6" transition="2" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="4" transition="3" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="9" transition="3" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="16" transition="4" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="15" transition="4" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="15" transition="5" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="1" transition="5" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="9" transition="6" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="29" transition="6" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="5" transition="7" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="7" transition="7" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="6" transition="8" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="8" transition="8" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="9" transition="9" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="4" transition="9" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="25" transition="10" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="10" transition="10" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="10" transition="11" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="12" transition="12" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="21" transition="12" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="13" transition="13" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="13" transition="14" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="14" transition="14" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="14" transition="15" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="1" transition="16" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="16" transition="16" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="3" transition="17" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="16" transition="17" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="15" transition="18" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="3" transition="18" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="17" transition="19" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="17" transition="20" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="18" transition="20" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="18" transition="21" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="19" transition="22" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="19" transition="23" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="20" transition="23" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="20" transition="24" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="21" transition="25" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="28" transition="25" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="21" transition="26" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="12" transition="26" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="23" transition="27" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="24" transition="27" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="24" transition="28" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="27" transition="28" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="24" transition="29" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="23" transition="29" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="11" transition="30" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="22" transition="30" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="22" transition="31" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="26" transition="31" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="22" transition="32" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="11" transition="32" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="7" transition="33" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="8" transition="33" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="25" transition="33" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="13" transition="34" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="17" transition="35" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="19" transition="36" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="2" transition="37" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="25" transition="38" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="6" transition="39" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="5" transition="40" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <timedCost></timedCost>

  <nbTokenColor>0</nbTokenColor>

  <declaration><![CDATA[// insert here your type definitions using C-like syntax

// insert here your function definitions 
// using C-like syntax


/* Const */

const int TASK_COUNT = 7;
const int CORE_COUNT = 3;
const int NULL = -1;


/* Task data structures */

typedef enum{
    SUSPENDED,
    READY,
    RUNNING
}task_state;

typedef enum{
    CPU,
    GPU,
    BOTH,
    UNKOWN
}task_core;

typedef struct{
	task_state state;
    task_core core;
	int id;
	int Priority;
	// int Period;
	// int WCET;
}task_descriptor;


typedef enum{
    ACTIVE,
    IDLE
}core_state;

typedef enum{
    GPU,
    CPU
}core_type;

typedef struct{
    core_state state;
    core_type type;
    int id;
    int selected_task;
}core_descriptor;


/* Task lists + mainting functions*/

task_descriptor sort_list(task_descriptor [TASK_COUNT] Sorted_Task) {
    int i, j, index = 0;

    // 1. On va créer trois tableaux temporaires pour les CPU, GPU, et UNKOWN
    task_descriptor [TASK_COUNT] cpu_tasks;
    task_descriptor [TASK_COUNT] gpu_tasks;
    task_descriptor [TASK_COUNT] unknown_tasks;

    int cpu_count = 0;
    int gpu_count = 0;
    int unk_count = 0;

    // 2. Séparer les tâches selon leur type de core
    for (i = 0; i < TASK_COUNT; i++) {
        if (Sorted_Task[i].id != NULL) {
            if (Sorted_Task[i].core == CPU) {
                cpu_tasks[cpu_count] = Sorted_Task[i];
                cpu_count++;
            } else if (Sorted_Task[i].core == GPU) {
                gpu_tasks[gpu_count] = Sorted_Task[i];
                gpu_count++;
            } else {
                unknown_tasks[unk_count] = Sorted_Task[i];
                unk_count++;
            }
        }
    }

    // 3. Trier les tâches CPU selon la priorité (ordre décroissant)
    for (i = 0; i < cpu_count - 1; i++) {
        for (j = i + 1; j < cpu_count; j++) {
            if (cpu_tasks[i].Priority < cpu_tasks[j].Priority) {
                task_descriptor temp = cpu_tasks[i];
                cpu_tasks[i] = cpu_tasks[j];
                cpu_tasks[j] = temp;
            }
        }
    }

    // 4. Réassembler les tableaux dans Sorted_Task : CPU -> GPU -> UNKOWN
    index = 0;
    for (i = 0; i < cpu_count; i++) {
        Sorted_Task[index] = cpu_tasks[i];
        index++;
    }
    for (i = 0; i < gpu_count; i++) {
        Sorted_Task[index] = gpu_tasks[i];
        index++;
    }
    for (i = 0; i < unk_count; i++) {
        Sorted_Task[index] = unknown_tasks[i];
        index++;
    }

    // 5. Nettoyer le reste du tableau si nécessaire
    while (index < TASK_COUNT) {
        Sorted_Task[index].id = NULL;
        Sorted_Task[index].Priority = NULL;
        Sorted_Task[index].state = SUSPENDED;
        Sorted_Task[index].core = UNKOWN; // ou CPU/GPU si tu préfères
        index++;
    }

    return Sorted_Task;
}

void insert_task(task_descriptor [TASK_COUNT + 10] &List_Task, task_descriptor [TASK_COUNT + 10] &Sorted_Task, int id) {
    int i;
    int index = -1;
    int null_index = -1;
    int already_exists = 0;

    // Trouver l'index de la tâche dans List_Task
    i = 0;
    while (i < TASK_COUNT && index == -1) {
        if (List_Task[i].id == id) {
            index = i;
        }
        i = i + 1;
    }

    // Vérifier si la tâche existe déjà dans Sorted_Task
    i = 0;
    while (i < TASK_COUNT && already_exists == 0) {
        if (Sorted_Task[i].id == id) {
            already_exists = 1;
        }
        i = i + 1;
    }

    // Si la tâche n'existe pas déjà et qu'on l'a trouvée dans List_Task
    if (already_exists == 0 && index != -1) {
        // Chercher la première position avec id == NULL
        i = 0;
        while (i < TASK_COUNT && null_index == -1) {
            if (Sorted_Task[i].id == NULL) {
                null_index = i;
            }
            i = i + 1;
        }

        // Si on a trouvé un NULL, on le supprime en décalant vers la gauche
        if (null_index != -1) {
            i = null_index;
            while (i < TASK_COUNT - 1) {
                Sorted_Task[i] = Sorted_Task[i + 1];
                i = i + 1;
            }
            // Marquer la dernière case comme vide
            Sorted_Task[TASK_COUNT - 1].id = NULL;
        }

        // Chercher la première position libre pour insérer
        i = 0;
        int position_insertion = -1;
        while (i < TASK_COUNT + 10 && position_insertion == -1) {
            if (Sorted_Task[i].id == NULL) {
                position_insertion = i;
            }
            i = i + 1;
        }

        // Insérer la tâche à la fin
        if (position_insertion != -1) {
            Sorted_Task[position_insertion] = List_Task[index];
            Sorted_Task[position_insertion].state = READY;
        }
    }
}

void suspend_task(task_descriptor [TASK_COUNT] &Sorted_Task, int id){
    int i;
    for(int i = 0; i < TASK_COUNT; i++){
	    if(Sorted_Task[i].id == id){
            Sorted_Task[0].state = SUSPENDED;
            Sorted_Task[0].Priority = NULL;
        }
    }
    Sorted_Task = sort_list(Sorted_Task);
}


/* Core API */


int is_selected_task(core_descriptor [CORE_COUNT] &List_Core, int id){
    int i;
    for(i=0; i < CORE_COUNT; i++){
        if(List_Core[i].selected_task == id){
            return 1;
        }
    }
return 0;
}

core_descriptor maj_core(core_descriptor [CORE_COUNT] List_Core, int id) {
    int i = 0;
    while (i < CORE_COUNT) {
        if (List_Core[i].selected_task == NULL) {
            List_Core[i].state = ACTIVE;
            List_Core[i].selected_task = id;
            i = CORE_COUNT;
        } else {
            i++;
        }
    }
    return List_Core;
}


/* Scheduler functions */

void scheduler(task_descriptor [TASK_COUNT] &Sorted_Task, core_descriptor [CORE_COUNT] &List_Core){
    Sorted_Task = sort_list(Sorted_Task);
    int i = 0;
    int task_found = 0;

    while (i < TASK_COUNT && task_found == 0) {
        int task_id = Sorted_Task[i].id;
        task_core required_core = Sorted_Task[i].core;
        int already_assigned = 0;

        // Vérifie si la tâche est déjà assignée
        int j = 0;
        while (j < CORE_COUNT) {
            if (List_Core[j].selected_task == task_id) {
                already_assigned = 1;
            }
            j++;
        }

        if (already_assigned == 0 && task_id != NULL) {
            int assigned = 0;
            j = 0;

            // Si la tâche peut aller sur BOTH, on privilégie d'abord les CPU
            if (required_core == BOTH) {
                // 1. Cherche un CPU disponible
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == NULL && List_Core[j].type == CPU) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }

                // 2. Si aucun CPU dispo, cherche un GPU disponible
                j = 0;
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == NULL && List_Core[j].type == GPU) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }
            }
            else {
                // Si la tâche demande un CPU OU un GPU spécifique
                j = 0;
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == NULL && List_Core[j].type == required_core) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }
            }
        }

        i++;
    }
}

void no_need_scheduler(task_descriptor [TASK_COUNT] &Sorted_Task, int id){
    int i;
    int removed = 0;

    for(i = 0; i < TASK_COUNT; i++){
        if(Sorted_Task[i].id == id && removed == 0){
            Sorted_Task[i].state = SUSPENDED;
            Sorted_Task[i].core = UNKOWN;
            Sorted_Task[i].id = NULL;
            Sorted_Task[i].Priority = NULL;
            removed = 1;
        }
    }

    Sorted_Task = sort_list(Sorted_Task);
}


/* Task API */

void free_core(core_descriptor [CORE_COUNT] &List_Core, int id){
    int i;
    for(i=0; i < CORE_COUNT; i++){
        if(List_Core[i].selected_task == id){
            List_Core[i].state = IDLE;
            List_Core[i].selected_task = NULL;
        }
    }
}


int has_task_on_cpu(core_descriptor [CORE_COUNT] &List_Core, int &cpu_flag){
    int i = 0;
    while (i < CORE_COUNT) {
        if (List_Core[i].type == CPU && List_Core[i].selected_task != NULL && cpu_flag == 1) {
            return 1;
        }
        i++;
    }
    return 0;
}

int has_task_on_gpu(core_descriptor [CORE_COUNT] &List_Core, int &gpu_flag){
    int i = 0;
    while (i < CORE_COUNT) {
        if (List_Core[i].type == GPU && List_Core[i].selected_task != NULL && gpu_flag == 1) {
            return 1;
        }
        i++;
    }
    return 0;
}



initially {
    
    int need_sched = 0;
    int no_need_cpu = 0;
    int no_need_gpu = 0;
    int cpu_flag = 0;
    int gpu_flag = 0;
    int selected_task = NULL;

    /* Task Declaration */
    
    /* Task_form = {state, id, priority, period, execution_time} */
    task_descriptor [TASK_COUNT] List_Task;
		List_Task[0].state = SUSPENDED;
        List_Task[0].core = CPU;
		List_Task[0].id = 0;
		List_Task[0].Priority = 1;
		// List_Task[0].Period = 5;
		// List_Task[0].WCET = 2;
		List_Task[1].state = SUSPENDED;
        List_Task[1].core = CPU;
		List_Task[1].id = 1;
		List_Task[1].Priority = 2;
		// List_Task[1].Period = 7;
		// List_Task[1].WCET = 3;
        List_Task[2].state = SUSPENDED;
        List_Task[2].core = GPU;
		List_Task[2].id = 2;
		List_Task[2].Priority = 3;
		// List_Task[1].Period = 7;
		// List_Task[1].WCET = 3;
        List_Task[3].state = SUSPENDED;
        List_Task[3].core = CPU;
		List_Task[3].id = 3;
		List_Task[3].Priority = 4;
		// List_Task[1].Period = 7;
		// List_Task[1].WCET = 3;
        List_Task[4].state = SUSPENDED;
        List_Task[4].core = CPU;
		List_Task[4].id = 4;
		List_Task[4].Priority = 5;
		// List_Task[1].Period = 7;
		// List_Task[1].WCET = 3;
        List_Task[5].state = SUSPENDED;
        List_Task[5].core = CPU;
		List_Task[5].id = 5;
		List_Task[5].Priority = 6;

        List_Task[6].state = SUSPENDED;
        List_Task[6].core = GPU;
		List_Task[6].id = 6;
		List_Task[6].Priority = 0;

	task_descriptor [TASK_COUNT] Sorted_Task;
	int i;
    for(i = 0; i < TASK_COUNT; i++){
		Sorted_Task[i].state = SUSPENDED;
        Sorted_Task[i].core = UNKOWN;
		Sorted_Task[i].id = NULL;
		Sorted_Task[i].Priority = NULL;
		// Sorted_Task[i].Period = NULL;
		// Sorted_Task[i].WCET = NULL;
	}

    /* CPU Declaration */
    
    /* CPU_form = {state, id, selected_task} */
    core_descriptor [CORE_COUNT] List_Core;
		List_Core[0].state = IDLE;
        List_Core[0].type = CPU;
		List_Core[0].id = 0;
		List_Core[0].selected_task = NULL;
		List_Core[1].state = IDLE;
        List_Core[1].type = CPU;
		List_Core[1].id = 1;
		List_Core[1].selected_task = NULL;
        List_Core[2].state = IDLE;
        List_Core[2].type = GPU;
		List_Core[2].id = 2;
		List_Core[2].selected_task = NULL;


// insert here the state variables declarations 
// and possibly some code to initialize them 
// using C-like syntax
 
 }



























]]></declaration>

  <project nbinput="0" openinput="0" nbinclude="0" >
 </project>

  <preferences> 
      <colorPlace  c0="SkyBlue2"  c1="#ffbebe"  c2="cyan"  c3="green"  c4="yellow"  c5="brown" /> 
 
      <colorTransition  c0="yellow"  c1="gray"  c2="cyan"  c3="green"  c4="SkyBlue2"  c5="brown" /> 
 
      <colorArc  c0="black"  c1="gray"  c2="blue"  c3="#beb760"  c4="#be5c7e"  c5="#46be90" /> 
 
  </preferences> 
 </TPN> 

  </romeo>
