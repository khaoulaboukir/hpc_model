<?xml version="1.0" encoding="UTF-8" ?>
<romeo version="Romeo v3.10.2">
<TPN name="/media/khalil-hamdoune/Khalil/Application/romeo-3.10.2/Test/SCHED/No_Preemtive/HPCDAG/HPCDAG.xml">
  <place id="1" identifier="CPU_Active" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="961.0" y="91.0"/> 
         <deltaLabel deltax="0.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="2" identifier="ReadyT1" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="181.0" y="331.0"/> 
         <deltaLabel deltax="-2.0" deltay="-21.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="3" identifier="GPU_Active" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="961.0" y="211.0"/> 
         <deltaLabel deltax="4.0" deltay="-21.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="4" identifier="SuspT1" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="361.0" y="331.0"/> 
         <deltaLabel deltax="-3.0" deltay="-25.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="5" identifier="ReadyT2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="631.0" y="271.0"/> 
         <deltaLabel deltax="0.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="6" identifier="ReadyT3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="631.0" y="391.0"/> 
         <deltaLabel deltax="-1.0" deltay="-25.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="7" identifier="SuspT2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="811.0" y="271.0"/> 
         <deltaLabel deltax="-1.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="8" identifier="SuspT3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="811.0" y="391.0"/> 
         <deltaLabel deltax="-9.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="9" identifier="ReadyT4" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="991.0" y="331.0"/> 
         <deltaLabel deltax="-1.0" deltay="-21.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="10" identifier="SuspT4" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="1171.0" y="331.0"/> 
         <deltaLabel deltax="-1.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="11" identifier="ATT2" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="451.0" y="271.0"/> 
         <deltaLabel deltax="-2.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="12" identifier="ATT3" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="451.0" y="391.0"/> 
         <deltaLabel deltax="-38.0" deltay="-6.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="13" identifier="ReadyTind" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="151.0" y="121.0"/> 
         <deltaLabel deltax="5.0" deltay="-20.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="14" identifier="SuspTind" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="331.0" y="121.0"/> 
         <deltaLabel deltax="5.0" deltay="-22.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="15" identifier="Call_core" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="781.0" y="151.0"/> 
         <deltaLabel deltax="-1.0" deltay="-26.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="16" identifier="Core" label="" initialMarking="3" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="601.0" y="151.0"/> 
         <deltaLabel deltax="-37.0" deltay="-7.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <transition id="1" identifier="T1ARR" label=""  eft="100" lft="100" eft_param="100" lft_param="100" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="91.0" y="331.0"/> 
        <deltaLabel deltax="0.0" deltay="-33.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 0);]]></update> 
  </transition> 

  <transition id="2" identifier="ExecT1" label=""  eft="15" lft="20" eft_param="15" lft_param="20" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 0)"> 
     <graphics color="0"> 
        <position x="271.0" y="331.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="17.0" deltay="12.0"/> 
        <deltaUpdate deltax="11.0" deltay="23.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 0);]]></update> 
  </transition> 

  <transition id="3" identifier="T2ARR" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="541.0" y="271.0"/> 
        <deltaLabel deltax="11.0" deltay="-31.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="5.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 1);]]></update> 
  </transition> 

  <transition id="4" identifier="SCHED" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="need_sched #greater 0"> 
     <graphics color="0"> 
        <position x="691.0" y="151.0"/> 
        <deltaLabel deltax="1.0" deltay="-30.0"/> 
        <deltaGuard deltax="0.0" deltay="12.0"/> 
        <deltaUpdate deltax="20.0" deltay="25.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[scheduler(Sorted_Task, List_Core);
need_sched--;]]></update> 
  </transition> 

  <transition id="5" identifier="Terminate_CPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="no_need_cpu #greater 0"> 
     <graphics color="0"> 
        <position x="1051.0" y="91.0"/> 
        <deltaLabel deltax="68.0" deltay="-10.0"/> 
        <deltaGuard deltax="19.0" deltay="12.0"/> 
        <deltaUpdate deltax="12.0" deltay="22.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu--;]]></update> 
  </transition> 

  <transition id="6" identifier="T3ARR" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="541.0" y="391.0"/> 
        <deltaLabel deltax="12.0" deltay="-29.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="5.0" deltay="7.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
gpu_flag++;
insert_task(List_Task, Sorted_Task, 2);]]></update> 
  </transition> 

  <transition id="7" identifier="ExecT2" label=""  eft="25" lft="30" eft_param="25" lft_param="30" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 1)"> 
     <graphics color="0"> 
        <position x="721.0" y="271.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="8.0" deltay="10.0"/> 
        <deltaUpdate deltax="24.0" deltay="21.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu++;
free_core(List_Core, 1);
no_need_scheduler(Sorted_Task, 1);]]></update> 
  </transition> 

  <transition id="8" identifier="ExecT3" label=""  eft="15" lft="20" eft_param="15" lft_param="20" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 2)"> 
     <graphics color="0"> 
        <position x="721.0" y="391.0"/> 
        <deltaLabel deltax="3.0" deltay="-30.0"/> 
        <deltaGuard deltax="8.0" deltay="8.0"/> 
        <deltaUpdate deltax="24.0" deltay="19.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_gpu++;
free_core(List_Core, 2);
no_need_scheduler(Sorted_Task, 2);]]></update> 
  </transition> 

  <transition id="9" identifier="T4ARR" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="901.0" y="331.0"/> 
        <deltaLabel deltax="-48.0" deltay="-16.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 3);]]></update> 
  </transition> 

  <transition id="10" identifier="ExecT4" label=""  eft="15" lft="20" eft_param="15" lft_param="20" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 3)"> 
     <graphics color="0"> 
        <position x="1081.0" y="331.0"/> 
        <deltaLabel deltax="2.0" deltay="-29.0"/> 
        <deltaGuard deltax="5.0" deltay="8.0"/> 
        <deltaUpdate deltax="10.0" deltay="18.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 3);]]></update> 
  </transition> 

  <transition id="11" identifier="Terminate" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="10" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="1261.0" y="331.0"/> 
        <deltaLabel deltax="-5.0" deltay="-29.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="6.0" deltay="8.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu++;
no_need_scheduler(Sorted_Task, 3);]]></update> 
  </transition> 

  <transition id="12" identifier="TerminateT1" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="10" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="451.0" y="331.0"/> 
        <deltaLabel deltax="-8.0" deltay="-26.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu++;
no_need_scheduler(Sorted_Task, 0);]]></update> 
  </transition> 

  <transition id="13" identifier="Tind" label=""  eft="100" lft="100" eft_param="100" lft_param="100" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="61.0" y="121.0"/> 
        <deltaLabel deltax="4.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="38.0" deltay="11.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[need_sched++;
cpu_flag++;
insert_task(List_Task, Sorted_Task, 4);]]></update> 
  </transition> 

  <transition id="14" identifier="ExecTind" label=""  eft="75" lft="80" eft_param="75" lft_param="80" speed="1" priority="0" cost="0" unctrl="0" obs="1"  guard="is_selected_task(List_Core, 4)"> 
     <graphics color="0"> 
        <position x="241.0" y="121.0"/> 
        <deltaLabel deltax="9.0" deltay="-32.0"/> 
        <deltaGuard deltax="15.0" deltay="10.0"/> 
        <deltaUpdate deltax="17.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[free_core(List_Core, 4);]]></update> 
  </transition> 

  <transition id="15" identifier="TerminateTind" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="10" cost="0" unctrl="0" obs="1"  guard=""> 
     <graphics color="0"> 
        <position x="421.0" y="121.0"/> 
        <deltaLabel deltax="15.0" deltay="-30.0"/> 
        <deltaGuard deltax="20" deltay="-20"/> 
        <deltaUpdate deltax="20" deltay="10"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_cpu++;
no_need_scheduler(Sorted_Task, 4);]]></update> 
  </transition> 

  <transition id="16" identifier="Call_CPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="50" cost="0" unctrl="0" obs="1"  guard="has_task_on_cpu(List_Core, cpu_flag) #eqeq 1"> 
     <graphics color="0"> 
        <position x="871.0" y="91.0"/> 
        <deltaLabel deltax="9.0" deltay="-29.0"/> 
        <deltaGuard deltax="0.0" deltay="14.0"/> 
        <deltaUpdate deltax="0.0" deltay="26.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[cpu_flag--;]]></update> 
  </transition> 

  <transition id="17" identifier="Call_GPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="50" cost="0" unctrl="0" obs="1"  guard="has_task_on_gpu(List_Core, gpu_flag) #eqeq 1"> 
     <graphics color="0"> 
        <position x="871.0" y="211.0"/> 
        <deltaLabel deltax="9.0" deltay="-33.0"/> 
        <deltaGuard deltax="5.0" deltay="7.0"/> 
        <deltaUpdate deltax="6.0" deltay="19.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[gpu_flag--;]]></update> 
  </transition> 

  <transition id="18" identifier="Terminate_GPU" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="no_need_gpu #greater 0"> 
     <graphics color="0"> 
        <position x="1051.0" y="211.0"/> 
        <deltaLabel deltax="64.0" deltay="-10.0"/> 
        <deltaGuard deltax="17.0" deltay="12.0"/> 
        <deltaUpdate deltax="15.0" deltay="21.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_gpu--;]]></update> 
  </transition> 

  <arc place="2" transition="1" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="2" transition="2" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="4" transition="2" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="11" transition="3" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="5" transition="3" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="16" transition="4" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="15" transition="4" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="1" transition="5" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="16" transition="5" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="811.0" ynail="62.0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="12" transition="6" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="6" transition="6" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="5" transition="7" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="7" transition="7" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="6" transition="8" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="8" transition="8" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="7" transition="9" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="8" transition="9" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="9" transition="9" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="9" transition="10" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="10" transition="10" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="10" transition="11" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="4" transition="12" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="11" transition="12" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="12" transition="12" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="13" transition="13" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="13" transition="14" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="14" transition="14" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="14" transition="15" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="15" transition="16" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="1" transition="16" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="15" transition="17" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="3" transition="17" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="3" transition="18" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="16" transition="18" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="810.0" ynail="241.0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <timedCost></timedCost>

  <nbTokenColor>0</nbTokenColor>

  <declaration><![CDATA[// insert here your type definitions using C-like syntax

// insert here your function definitions 
// using C-like syntax


/* Const */

const int TASK_COUNT = 5;
const int CORE_COUNT = 3;
const int NULL = -1;


/* Task data structures */

typedef enum{
    SUSPENDED,
    READY,
    RUNNING
}task_state;

typedef enum{
    CPU,
    GPU,
    BOTH,
    UNKOWN
}task_core;

typedef struct{
	task_state state;
    task_core core;
	int id;
	int Priority;
	// int Period;
	// int WCET;
}task_descriptor;


typedef enum{
    ACTIVE,
    IDLE
}core_state;

typedef enum{
    GPU,
    CPU
}core_type;

typedef struct{
    core_state state;
    core_type type;
    int id;
    int selected_task;
}core_descriptor;


/* Task lists + mainting functions*/

task_descriptor sort_list(task_descriptor [TASK_COUNT] Sorted_Task){
    // int result = 1;
    int i, j;
    task_descriptor temp;

    for(i = 0; i < TASK_COUNT - 1; i++){
        for(j = i; j < TASK_COUNT; j++){
            if(Sorted_Task[i].Priority < Sorted_Task[j].Priority){
                temp = Sorted_Task[i];
                Sorted_Task[i] = Sorted_Task[j];
                Sorted_Task[j] = temp;
            }
        }
    }
    return Sorted_Task;
}

void insert_task(task_descriptor [TASK_COUNT] &List_Task, task_descriptor [TASK_COUNT] &Sorted_Task, int id) {
    int i = 0;
    int index = NULL;
    int found = 0;

    // Trouver l’index dans List_Task
    while (i < TASK_COUNT) {
        if (List_Task[i].id == id && found == 0) {
            index = i;
            found = 1;
        }
        i++;
    }

    // Réinitialiser l’indice pour insérer dans Sorted_Task
    i = 0;
    found = 0;
    while (i < TASK_COUNT) {
        if (Sorted_Task[i].id == NULL && found == 0) {
            Sorted_Task[i] = List_Task[index];
            Sorted_Task[i].state = READY;
            found = 1;
        }
        i++;
    }
}

void suspend_task(task_descriptor [TASK_COUNT] &Sorted_Task, int id){
    int i;
    for(int i = 0; i < TASK_COUNT; i++){
	    if(Sorted_Task[i].id == id){
            Sorted_Task[0].state = SUSPENDED;
            Sorted_Task[0].Priority = NULL;
        }
    }
    Sorted_Task = sort_list(Sorted_Task);
}


/* Core API */


int is_selected_task(core_descriptor [CORE_COUNT] &List_Core, int id){
    int i;
    for(i=0; i < CORE_COUNT; i++){
        if(List_Core[i].selected_task == id){
            return 1;
        }
    }
return 0;
}

core_descriptor maj_core(core_descriptor [CORE_COUNT] List_Core, int id) {
    int i = 0;
    while (i < CORE_COUNT) {
        if (List_Core[i].selected_task == NULL) {
            List_Core[i].state = ACTIVE;
            List_Core[i].selected_task = id;
            i = CORE_COUNT;
        } else {
            i++;
        }
    }
    return List_Core;
}


/* Scheduler functions */

void scheduler(task_descriptor [TASK_COUNT] &Sorted_Task, core_descriptor [CORE_COUNT] &List_Core){
    Sorted_Task = sort_list(Sorted_Task);
    int i = 0;
    int task_found = 0;

    while (i < TASK_COUNT && task_found == 0) {
        int task_id = Sorted_Task[i].id;
        task_core required_core = Sorted_Task[i].core;
        int already_assigned = 0;

        // Vérifie si la tâche est déjà assignée
        int j = 0;
        while (j < CORE_COUNT) {
            if (List_Core[j].selected_task == task_id) {
                already_assigned = 1;
            }
            j++;
        }

        if (already_assigned == 0 && task_id != NULL) {
            int assigned = 0;
            j = 0;

            // Si la tâche peut aller sur BOTH, on privilégie d'abord les CPU
            if (required_core == BOTH) {
                // 1. Cherche un CPU disponible
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == NULL && List_Core[j].type == CPU) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }

                // 2. Si aucun CPU dispo, cherche un GPU disponible
                j = 0;
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == NULL && List_Core[j].type == GPU) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }
            }
            else {
                // Si la tâche demande un CPU OU un GPU spécifique
                j = 0;
                while (j < CORE_COUNT && assigned == 0) {
                    if (List_Core[j].selected_task == NULL && List_Core[j].type == required_core) {
                        List_Core[j].state = ACTIVE;
                        List_Core[j].selected_task = task_id;
                        assigned = 1;
                        task_found = 1;
                    }
                    j++;
                }
            }
        }

        i++;
    }
}

void no_need_scheduler(task_descriptor [TASK_COUNT] &Sorted_Task, int id){
    Sorted_Task = sort_list(Sorted_Task);
    int i;
    for(i = 0; i < TASK_COUNT; i++){
        if(Sorted_Task[i].id == id){
            Sorted_Task[i].state = SUSPENDED;
            Sorted_Task[i].core = UNKOWN;
            Sorted_Task[i].id = NULL;
            Sorted_Task[i].Priority = NULL;
            // Sorted_Task[i].Period = NULL;
            // Sorted_Task[i].WCET = NULL;
        }
    }
}


/* Task API */

void free_core(core_descriptor [CORE_COUNT] &List_Core, int id){
    int i;
    for(i=0; i < CORE_COUNT; i++){
        if(List_Core[i].selected_task == id){
            List_Core[i].state = IDLE;
            List_Core[i].selected_task = NULL;
        }
    }
}


int has_task_on_cpu(core_descriptor [CORE_COUNT] &List_Core, int &cpu_flag){
    int i = 0;
    while (i < CORE_COUNT) {
        if (List_Core[i].type == CPU && List_Core[i].selected_task != NULL && cpu_flag == 1) {
            return 1;
        }
        i++;
    }
    return 0;
}

int has_task_on_gpu(core_descriptor [CORE_COUNT] &List_Core, int &gpu_flag){
    int i = 0;
    while (i < CORE_COUNT) {
        if (List_Core[i].type == GPU && List_Core[i].selected_task != NULL && gpu_flag == 1) {
            return 1;
        }
        i++;
    }
    return 0;
}



initially {
    
    int need_sched = 0;
    int no_need_cpu = 0;
    int no_need_gpu = 0;
    int cpu_flag = 0;
    int gpu_flag = 0;
    int selected_task = NULL;

    /* Task Declaration */
    
    /* Task_form = {state, id, priority, period, execution_time} */
    task_descriptor [TASK_COUNT] List_Task;
		List_Task[0].state = SUSPENDED;
        List_Task[0].core = CPU;
		List_Task[0].id = 0;
		List_Task[0].Priority = 1;
		// List_Task[0].Period = 5;
		// List_Task[0].WCET = 2;
		List_Task[1].state = SUSPENDED;
        List_Task[1].core = CPU;
		List_Task[1].id = 1;
		List_Task[1].Priority = 2;
		// List_Task[1].Period = 7;
		// List_Task[1].WCET = 3;
        List_Task[2].state = SUSPENDED;
        List_Task[2].core = GPU;
		List_Task[2].id = 2;
		List_Task[2].Priority = 3;
		// List_Task[1].Period = 7;
		// List_Task[1].WCET = 3;
        List_Task[3].state = SUSPENDED;
        List_Task[3].core = CPU;
		List_Task[3].id = 3;
		List_Task[3].Priority = 4;
		// List_Task[1].Period = 7;
		// List_Task[1].WCET = 3;
        List_Task[4].state = SUSPENDED;
        List_Task[4].core = CPU;
		List_Task[4].id = 4;
		List_Task[4].Priority = 5;
		// List_Task[1].Period = 7;
		// List_Task[1].WCET = 3;
	
	task_descriptor [TASK_COUNT] Sorted_Task;
	int i;
    for(i = 0; i < TASK_COUNT; i++){
		Sorted_Task[i].state = SUSPENDED;
        Sorted_Task[i].core = UNKOWN;
		Sorted_Task[i].id = NULL;
		Sorted_Task[i].Priority = NULL;
		// Sorted_Task[i].Period = NULL;
		// Sorted_Task[i].WCET = NULL;
	}

    /* CPU Declaration */
    
    /* CPU_form = {state, id, selected_task} */
    core_descriptor [CORE_COUNT] List_Core;
		List_Core[0].state = IDLE;
        List_Core[0].type = CPU;
		List_Core[0].id = 0;
		List_Core[0].selected_task = NULL;
		List_Core[1].state = IDLE;
        List_Core[1].type = CPU;
		List_Core[1].id = 1;
		List_Core[1].selected_task = NULL;
        List_Core[2].state = IDLE;
        List_Core[2].type = GPU;
		List_Core[2].id = 2;
		List_Core[2].selected_task = NULL;


// insert here the state variables declarations 
// and possibly some code to initialize them 
// using C-like syntax
 
 }






















]]></declaration>

  <project nbinput="0" openinput="0" nbinclude="0" >
 </project>

  <preferences> 
      <colorPlace  c0="SkyBlue2"  c1="#ffbebe"  c2="cyan"  c3="green"  c4="yellow"  c5="brown" /> 
 
      <colorTransition  c0="yellow"  c1="gray"  c2="cyan"  c3="green"  c4="SkyBlue2"  c5="brown" /> 
 
      <colorArc  c0="black"  c1="gray"  c2="blue"  c3="#beb760"  c4="#be5c7e"  c5="#46be90" /> 
 
  </preferences> 
 </TPN> 

  </romeo>
