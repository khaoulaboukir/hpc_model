<?xml version="1.0" encoding="UTF-8" ?>
<romeo version="Romeo v3.10.2">
<TPN name="/media/khalil-hamdoune/Khalil/Application/romeo-3.10.2/Houssam/Test/No_Preemtive/multicore_multitache/SCHED_no_Preemtive_mul_Core.xml">
  <place id="1" identifier="core" label="" initialMarking="2" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="571.0" y="61.0"/> 
         <deltaLabel deltax="1.0" deltay="-23.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <place id="3" identifier="executing" label="" initialMarking="0" eft="0" lft="inf"> 
      <graphics color="0"> 
         <position x="571.0" y="121.0"/> 
         <deltaLabel deltax="3.0" deltay="-21.0"/> 
      </graphics> 
      <scheduling gamma="0" omega="0"/> 
  </place> 

  <transition id="4" identifier="SCHED" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="need_sched #greater 0"> 
     <graphics color="0"> 
        <position x="481.0" y="121.0"/> 
        <deltaLabel deltax="-51.0" deltay="-12.0"/> 
        <deltaGuard deltax="2.0" deltay="11.0"/> 
        <deltaUpdate deltax="-10.0" deltay="25.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[scheduler(Sorted_Task, List_Core);
need_sched--;]]></update> 
  </transition> 

  <transition id="5" identifier="NO_SCHED" label=""  eft="0" lft="0" lft_param="0" speed="1" priority="30" cost="0" unctrl="0" obs="1"  guard="no_need_sched #greater 0"> 
     <graphics color="0"> 
        <position x="661.0" y="121.0"/> 
        <deltaLabel deltax="58.0" deltay="-18.0"/> 
        <deltaGuard deltax="6.0" deltay="9.0"/> 
        <deltaUpdate deltax="89.0" deltay="21.0"/> 
        <deltaSpeed deltax="-20" deltay="5"/> 
        <deltaCost deltax="-20" deltay="5"/> 
     </graphics> 
     <update><![CDATA[no_need_sched--;]]></update> 
  </transition> 

  <arc place="1" transition="4" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="3" transition="4" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <arc place="3" transition="5" type="PlaceTransition" weight="1" tokenColor="-1"  inhibitingCondition=""> 
    <nail xnail="0" ynail="0"/> 
    <graphics  color="0"> 
     </graphics> 
  </arc> 
 

  <arc place="1" transition="5" type="TransitionPlace" weight="1" tokenColor="-1"> 
     <nail xnail="0" ynail="0"/> 
     <graphics  color="0"> 
     </graphics> 
  </arc> 

  <timedCost></timedCost>

  <nbTokenColor>0</nbTokenColor>

  <declaration><![CDATA[// insert here your type definitions using C-like syntax

// insert here your function definitions 
// using C-like syntax


/* Const */

const int TASK_COUNT = 2;
const int CORE_COUNT = 2;
const int NULL = -1;


/* Task data structures */

typedef enum{
    SUSPENDED,
    READY,
    RUNNING
}task_state;

typedef struct{
	task_state state;
	int id;
	int Priority;
	// int Period;
	int WCET;
}task_descriptor;


typedef enum{
    ACTIVE,
    IDLE
}core_state;

typedef struct{
    core_state state;
    int id;
    int selected_task;
}core_descriptor;


/* Task lists + mainting functions*/

task_descriptor sort_list(task_descriptor [TASK_COUNT] Sorted_Task){
    // int result = 1;
    int i, j;
    task_descriptor temp;

    for(i = 0; i < TASK_COUNT - 1; i++){
        for(j = i; j < TASK_COUNT; j++){
            if(Sorted_Task[i].Priority < Sorted_Task[j].Priority){
                temp = Sorted_Task[i];
                Sorted_Task[i] = Sorted_Task[j];
                Sorted_Task[j] = temp;
            }
        }
    }
    return Sorted_Task;
}

void insert_task(task_descriptor [TASK_COUNT] &List_Task, task_descriptor [TASK_COUNT] &Sorted_Task, int id) {
    int i = 0;
    int index = NULL;
    int found = 0;

    // Trouver l’index dans List_Task
    while (i < TASK_COUNT) {
        if (List_Task[i].id == id && found == 0) {
            index = i;
            found = 1;
        }
        i++;
    }

    // Réinitialiser l’indice pour insérer dans Sorted_Task
    i = 0;
    found = 0;
    while (i < TASK_COUNT) {
        if (Sorted_Task[i].id == NULL && found == 0) {
            Sorted_Task[i] = List_Task[index];
            Sorted_Task[i].state = READY;
            found = 1;
        }
        i++;
    }
}

void suspend_task(task_descriptor [TASK_COUNT] &Sorted_Task, int id){
    int i;
    for(int i = 0; i < TASK_COUNT; i++){
	    if(Sorted_Task[i].id == id){
            Sorted_Task[0].state = SUSPENDED;
            Sorted_Task[0].Priority = NULL;
        }
    }
    Sorted_Task = sort_list(Sorted_Task);
}


/* Core API */


int is_selected_task(core_descriptor [CORE_COUNT] &List_Core, int id){
    int i;
    for(i=0; i < CORE_COUNT; i++){
        if(List_Core[i].selected_task == id){
            return 1;
        }
    }
return 0;
}

core_descriptor maj_core(core_descriptor [CORE_COUNT] List_Core, int id) {
    int i = 0;
    while (i < CORE_COUNT) {
        if (List_Core[i].selected_task == NULL) {
            List_Core[i].state = ACTIVE;
            List_Core[i].selected_task = id;
            i = CORE_COUNT;
        } else {
            i++;
        }
    }
    return List_Core;
}


/* Scheduler functions */

void scheduler(task_descriptor [TASK_COUNT] &Sorted_Task, core_descriptor [CORE_COUNT] &List_Core){
    Sorted_Task = sort_list(Sorted_Task);

    int i = 0;
    int task_found = 0;

    while (i < TASK_COUNT && task_found == 0) {
        int task_id = Sorted_Task[i].id;
        int already_assigned = 0;

        int j = 0;
        while (j < CORE_COUNT) {
            if (List_Core[j].selected_task == task_id) {
                already_assigned = 1;
            }
            j++;
        }

        if (already_assigned == 0 && task_id != NULL) {
            List_Core = maj_core(List_Core, task_id);
            task_found = 1;
        }

        i++;
    }
}

void no_need_scheduler(task_descriptor [TASK_COUNT] &Sorted_Task, int id){
    Sorted_Task = sort_list(Sorted_Task);
    int i;
    for(i = 0; i < TASK_COUNT; i++){
        if(Sorted_Task[i].id == id){
            Sorted_Task[i].state = SUSPENDED;
            Sorted_Task[i].id = NULL;
            Sorted_Task[i].Priority = NULL;
            // Sorted_Task[i].Period = NULL;
            Sorted_Task[i].WCET = NULL;
        }
    }
}


/* Task API */

void free_core(core_descriptor [CORE_COUNT] &List_Core, int id){
    int i;
    for(i=0; i < CORE_COUNT; i++){
        if(List_Core[i].selected_task == id){
            List_Core[i].state = IDLE;
            List_Core[i].selected_task = NULL;
        }
    }
}


initially {
    
    int need_sched = 0;
    int no_need_sched = 0;
    int selected_task = NULL;

    /* Task Declaration */
    
    /* Task_form = {state, id, priority, period, execution_time} */
    task_descriptor [TASK_COUNT] List_Task;
		List_Task[0].state = SUSPENDED;
		List_Task[0].id = 0;
		List_Task[0].Priority = 1;
		// List_Task[0].Period = 5;
		List_Task[0].WCET = 2;
		List_Task[1].state = SUSPENDED;
		List_Task[1].id = 1;
		List_Task[1].Priority = 2;
		// List_Task[1].Period = 7;
		List_Task[1].WCET = 3;
	
	task_descriptor [TASK_COUNT] Sorted_Task;
	int i;
    for(i = 0; i < TASK_COUNT; i++){
		Sorted_Task[i].state = SUSPENDED;
		Sorted_Task[i].id = NULL;
		Sorted_Task[i].Priority = NULL;
		// Sorted_Task[i].Period = NULL;
		Sorted_Task[i].WCET = NULL;
	}

    /* CPU Declaration */
    
    /* CPU_form = {state, id, selected_task} */
    core_descriptor [CORE_COUNT] List_Core;
		List_Core[0].state = IDLE;
		List_Core[0].id = 0;
		List_Core[0].selected_task = NULL;
		List_Core[1].state = IDLE;
		List_Core[1].id = 1;
		List_Core[1].selected_task = NULL;


// insert here the state variables declarations 
// and possibly some code to initialize them 
// using C-like syntax
 
 }













]]></declaration>

  <project nbinput="2" openinput="2" nbinclude="0" >
      <input id="1"  file="TASK.xml"  status="open"/>
      <input id="2"  file="TASK2.xml"  status="open"/>
 </project>

  <preferences> 
      <colorPlace  c0="SkyBlue2"  c1="#ffbebe"  c2="cyan"  c3="green"  c4="yellow"  c5="brown" /> 
 
      <colorTransition  c0="yellow"  c1="gray"  c2="cyan"  c3="green"  c4="SkyBlue2"  c5="brown" /> 
 
      <colorArc  c0="black"  c1="gray"  c2="blue"  c3="#beb760"  c4="#be5c7e"  c5="#46be90" /> 
 
  </preferences> 
 </TPN> 

  </romeo>
